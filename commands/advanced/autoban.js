const { hasFlexiblePermission } = require('../../utils/permissions');
const embedFactory = require('../../utils/embeds');
const logger = require('../../utils/logger');
const { ActionRowBuilder, ButtonBuilder, ButtonStyle, ComponentType } = require('discord.js');

module.exports = {
    name: 'autoban',
    description: 'H·ªá th·ªëng t·ª± ƒë·ªông ban th√†nh vi√™n d·ª±a tr√™n keywords v√† ƒëi·ªÅu ki·ªán',
    aliases: ['autobanlist', 'keywordban'],
    usage: '!autoban <add|remove|list|toggle> [keyword/condition]',
    category: 'advanced',
    permissions: 'admin',
    guildOnly: true,
    examples: [
        '!autoban add scam',
        '!autoban add "discord nitro"',
        '!autoban remove spam',
        '!autoban list',
        '!autoban toggle'
    ],

    // In-memory storage (in real app, use database)
    autoBanData: new Map(),

    async execute(message, args, client) {
        try {
            // Check permissions
            if (!await hasFlexiblePermission(message.member, 'autoban', this.permissions, message.guild.id)) {
                const embed = embedFactory.error(
                    'Kh√¥ng c√≥ quy·ªÅn!',
                    'L·ªánh n√†y c·∫ßn quy·ªÅn **Administrator** ho·∫∑c cao h∆°n.'
                );
                return message.reply({ embeds: [embed] });
            }

            // Initialize guild data if not exists
            if (!this.autoBanData.has(message.guild.id)) {
                this.autoBanData.set(message.guild.id, {
                    enabled: false,
                    keywords: [],
                    actions: [],
                    whitelist: []
                });
            }

            if (!args[0]) {
                return this.showStatus(message);
            }

            const action = args[0].toLowerCase();
            
            switch (action) {
                case 'add':
                case 'a':
                    if (!args[1]) {
                        const embed = embedFactory.error(
                            'Thi·∫øu keyword!',
                            'S·ª≠ d·ª•ng: `!autoban add <keyword>`\n\nV√≠ d·ª•: `!autoban add "discord nitro"`'
                        );
                        return message.reply({ embeds: [embed] });
                    }
                    await this.addKeyword(message, args.slice(1).join(' '));
                    break;
                case 'remove':
                case 'r':
                case 'delete':
                    if (!args[1]) {
                        const embed = embedFactory.error(
                            'Thi·∫øu keyword!',
                            'S·ª≠ d·ª•ng: `!autoban remove <keyword>`'
                        );
                        return message.reply({ embeds: [embed] });
                    }
                    await this.removeKeyword(message, args.slice(1).join(' '));
                    break;
                case 'list':
                case 'l':
                    await this.listKeywords(message);
                    break;
                case 'toggle':
                case 't':
                    await this.toggleSystem(message);
                    break;
                case 'settings':
                case 's':
                    await this.showSettings(message);
                    break;
                case 'test':
                    if (!args[1]) {
                        const embed = embedFactory.error(
                            'Thi·∫øu text ƒë·ªÉ test!',
                            'S·ª≠ d·ª•ng: `!autoban test <text>`'
                        );
                        return message.reply({ embeds: [embed] });
                    }
                    await this.testKeyword(message, args.slice(1).join(' '));
                    break;
                default:
                    await this.showHelp(message);
                    break;
            }

        } catch (error) {
            logger.error('Autoban command error', error);
            const embed = embedFactory.error(
                'L·ªói autoban!',
                'ƒê√£ x·∫£y ra l·ªói khi th·ª±c thi l·ªánh autoban.',
                error.message
            );
            await message.reply({ embeds: [embed] });
        }
    },

    async addKeyword(message, keyword) {
        const guildData = this.autoBanData.get(message.guild.id);
        const cleanKeyword = keyword.toLowerCase().trim();

        // Check if keyword already exists
        if (guildData.keywords.some(k => k.keyword === cleanKeyword)) {
            const embed = embedFactory.warning(
                'Keyword ƒë√£ t·ªìn t·∫°i!',
                `Keyword \`${cleanKeyword}\` ƒë√£ c√≥ trong danh s√°ch autoban.`
            );
            return message.reply({ embeds: [embed] });
        }

        // Add keyword
        const keywordData = {
            id: Date.now(),
            keyword: cleanKeyword,
            addedBy: message.author.id,
            addedAt: new Date().toISOString(),
            triggered: 0,
            lastTriggered: null
        };

        guildData.keywords.push(keywordData);

        const embed = embedFactory.success(
            '‚úÖ ƒê√£ th√™m AutoBan keyword!',
            `**Keyword:** \`${cleanKeyword}\`\n**Th√™m b·ªüi:** ${message.author.tag}`
        );

        embed.addFields([
            {
                name: '‚ö†Ô∏è C·∫£nh b√°o:',
                value: 'Keyword n√†y s·∫Ω **T·ª∞ ƒê·ªòNG BAN** th√†nh vi√™n khi:\n‚Ä¢ G·ª≠i tin nh·∫Øn ch·ª©a keyword\n‚Ä¢ ƒê·∫∑t nickname ch·ª©a keyword\n‚Ä¢ Username ch·ª©a keyword (khi join)',
                inline: false
            },
            {
                name: 'üõ°Ô∏è B·∫£o v·ªá:',
                value: 'Autoban s·∫Ω **KH√îNG** √°p d·ª•ng cho:\n‚Ä¢ Server Owner\n‚Ä¢ Bot Owner\n‚Ä¢ Th√†nh vi√™n c√≥ quy·ªÅn Administrator\n‚Ä¢ Bots',
                inline: false
            }
        ]);

        await message.reply({ embeds: [embed] });
        logger.command(message.author, `autoban add "${cleanKeyword}"`, message.guild);
    },

    async removeKeyword(message, keyword) {
        const guildData = this.autoBanData.get(message.guild.id);
        const cleanKeyword = keyword.toLowerCase().trim();

        const keywordIndex = guildData.keywords.findIndex(k => k.keyword === cleanKeyword);
        
        if (keywordIndex === -1) {
            const embed = embedFactory.error(
                'Keyword kh√¥ng t·ªìn t·∫°i!',
                `Keyword \`${cleanKeyword}\` kh√¥ng c√≥ trong danh s√°ch.\n\nXem danh s√°ch: \`!autoban list\``
            );
            return message.reply({ embeds: [embed] });
        }

        const removedKeyword = guildData.keywords[keywordIndex];
        guildData.keywords.splice(keywordIndex, 1);

        const embed = embedFactory.success(
            '‚úÖ ƒê√£ x√≥a AutoBan keyword!',
            `**Keyword:** \`${cleanKeyword}\`\n**ƒê√£ trigger:** ${removedKeyword.triggered} l·∫ßn`
        );

        await message.reply({ embeds: [embed] });
        logger.command(message.author, `autoban remove "${cleanKeyword}"`, message.guild);
    },

    async listKeywords(message) {
        const guildData = this.autoBanData.get(message.guild.id);

        if (guildData.keywords.length === 0) {
            const embed = embedFactory.warning(
                'Kh√¥ng c√≥ AutoBan keywords!',
                'Ch∆∞a c√≥ keyword n√†o ƒë∆∞·ª£c thi·∫øt l·∫≠p.\n\nTh√™m keyword: `!autoban add <keyword>`'
            );
            return message.reply({ embeds: [embed] });
        }

        const embed = embedFactory.info(
            'üö´ AutoBan Keywords',
            `**Server:** ${message.guild.name}\n**Tr·∫°ng th√°i:** ${guildData.enabled ? 'üü¢ Ho·∫°t ƒë·ªông' : 'üî¥ T·∫Øt'}\n**T·ªïng:** ${guildData.keywords.length} keywords`
        );

        const keywordList = guildData.keywords.map((k, index) => {
            const addedBy = message.guild.members.cache.get(k.addedBy)?.user.tag || 'Unknown';
            const addedDate = new Date(k.addedAt).toLocaleDateString('vi-VN');
            
            return `**${index + 1}.** \`${k.keyword}\`\n` +
                   `‚îú Th√™m b·ªüi: ${addedBy}\n` +
                   `‚îú Ng√†y th√™m: ${addedDate}\n` +
                   `‚îú Triggered: ${k.triggered} l·∫ßn\n` +
                   `‚îî ID: ${k.id}`;
        }).join('\n\n');

        embed.addFields([{
            name: 'üìù Danh s√°ch Keywords:',
            value: keywordList.length > 1000 ? keywordList.substring(0, 1000) + '...' : keywordList,
            inline: false
        }]);

        if (keywordList.length > 1000) {
            embed.addFields([{
                name: 'üìÑ L∆∞u √Ω:',
                value: 'Danh s√°ch qu√° d√†i, ch·ªâ hi·ªÉn th·ªã m·ªôt ph·∫ßn. S·ª≠ d·ª•ng `!autoban settings` ƒë·ªÉ xem ƒë·∫ßy ƒë·ªß.',
                inline: false
            }]);
        }

        // Add control buttons
        const buttons = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('autoban_toggle')
                    .setLabel(guildData.enabled ? 'üî¥ T·∫Øt AutoBan' : 'üü¢ B·∫≠t AutoBan')
                    .setStyle(guildData.enabled ? ButtonStyle.Danger : ButtonStyle.Success),
                new ButtonBuilder()
                    .setCustomId('autoban_clear_all')
                    .setLabel('üóëÔ∏è X√≥a t·∫•t c·∫£')
                    .setStyle(ButtonStyle.Danger)
            );

        const msg = await message.reply({ embeds: [embed], components: [buttons] });

        // Handle button interactions
        const collector = msg.createMessageComponentCollector({
            componentType: ComponentType.Button,
            time: 300000 // 5 minutes
        });

        collector.on('collect', async (interaction) => {
            if (interaction.user.id !== message.author.id) {
                await interaction.reply({ 
                    content: 'Ch·ªâ ng∆∞·ªùi g·ªçi l·ªánh m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng!', 
                    ephemeral: true 
                });
                return;
            }

            await interaction.deferUpdate();
            
            if (interaction.customId === 'autoban_toggle') {
                await this.toggleSystem(message, true);
            } else if (interaction.customId === 'autoban_clear_all') {
                await this.clearAllKeywords(message);
            }
        });
    },

    async toggleSystem(message, isButton = false) {
        const guildData = this.autoBanData.get(message.guild.id);
        guildData.enabled = !guildData.enabled;

        const embed = embedFactory.success(
            `${guildData.enabled ? 'üü¢' : 'üî¥'} AutoBan ${guildData.enabled ? 'ƒê√£ B·∫¨T' : 'ƒê√£ T·∫ÆT'}!`,
            `H·ªá th·ªëng AutoBan ƒë√£ ƒë∆∞·ª£c **${guildData.enabled ? 'k√≠ch ho·∫°t' : 'v√¥ hi·ªáu h√≥a'}**.`
        );

        if (guildData.enabled && guildData.keywords.length === 0) {
            embed.addFields([{
                name: '‚ö†Ô∏è L∆∞u √Ω:',
                value: 'AutoBan ƒë√£ b·∫≠t nh∆∞ng ch∆∞a c√≥ keyword n√†o.\nTh√™m keyword: `!autoban add <keyword>`',
                inline: false
            }]);
        }

        if (!isButton) {
            await message.reply({ embeds: [embed] });
        }

        logger.command(message.author, `autoban ${guildData.enabled ? 'enable' : 'disable'}`, message.guild);
    },

    async showStatus(message) {
        const guildData = this.autoBanData.get(message.guild.id);

        const embed = embedFactory.info(
            'ü§ñ AutoBan System Status',
            `**Server:** ${message.guild.name}`
        );

        embed.addFields([
            {
                name: '‚öôÔ∏è Tr·∫°ng th√°i h·ªá th·ªëng:',
                value: `**Status:** ${guildData.enabled ? 'üü¢ Ho·∫°t ƒë·ªông' : 'üî¥ T·∫Øt'}\n**Keywords:** ${guildData.keywords.length}\n**Total Triggers:** ${guildData.keywords.reduce((sum, k) => sum + k.triggered, 0)}`,
                inline: true
            },
            {
                name: 'üéØ H√†nh ƒë·ªông AutoBan:',
                value: '‚Ä¢ Ban ngay l·∫≠p t·ª©c\n‚Ä¢ X√≥a tin nh·∫Øn vi ph·∫°m\n‚Ä¢ Log v√†o channel\n‚Ä¢ Th√¥ng b√°o cho mods',
                inline: true
            },
            {
                name: 'üõ°Ô∏è Mi·ªÖn tr·ª´ AutoBan:',
                value: '‚Ä¢ Server Owner\n‚Ä¢ Bot Owner\n‚Ä¢ Administrator\n‚Ä¢ Bots\n‚Ä¢ Whitelist users',
                inline: true
            }
        ]);

        if (guildData.keywords.length > 0) {
            const recentKeywords = guildData.keywords
                .slice(-3)
                .map(k => `‚Ä¢ \`${k.keyword}\` (${k.triggered} triggers)`)
                .join('\n');
                
            embed.addFields([{
                name: 'üìù Keywords g·∫ßn ƒë√¢y:',
                value: recentKeywords,
                inline: false
            }]);
        }

        await message.reply({ embeds: [embed] });
    },

    async showHelp(message) {
        const embed = embedFactory.help({
            title: 'üö´ AutoBan System Help',
            description: '**H·ªá th·ªëng t·ª± ƒë·ªông ban d·ª±a tr√™n keywords**\n\n‚ö†Ô∏è **C·ª±c k·ª≥ nguy hi·ªÉm - s·ª≠ d·ª•ng c·∫©n th·∫≠n!**',
            categories: [
                {
                    emoji: '‚ûï',
                    name: 'Add Keyword',
                    value: '`!autoban add <keyword>` - Th√™m keyword c·∫ßn ban'
                },
                {
                    emoji: '‚ûñ',
                    name: 'Remove Keyword',
                    value: '`!autoban remove <keyword>` - X√≥a keyword'
                },
                {
                    emoji: 'üìã',
                    name: 'List Keywords',
                    value: '`!autoban list` - Xem t·∫•t c·∫£ keywords'
                },
                {
                    emoji: 'üîÑ',
                    name: 'Toggle System',
                    value: '`!autoban toggle` - B·∫≠t/t·∫Øt AutoBan'
                },
                {
                    emoji: 'üß™',
                    name: 'Test Keyword',
                    value: '`!autoban test <text>` - Test keyword matching'
                }
            ]
        });

        embed.addFields([
            {
                name: '‚ö†Ô∏è C·∫£nh b√°o nghi√™m tr·ªçng:',
                value: '‚Ä¢ AutoBan s·∫Ω **BAN NGAY L·∫¨P T·ª®C** kh√¥ng c·∫ßn x√°c nh·∫≠n\n‚Ä¢ Kh√¥ng th·ªÉ undo sau khi ban\n‚Ä¢ C√≥ th·ªÉ ban nh·∫ßm th√†nh vi√™n v√¥ t·ªôi\n‚Ä¢ Ch·ªâ s·ª≠ d·ª•ng cho spam/raid nghi√™m tr·ªçng',
                inline: false
            },
            {
                name: 'üõ°Ô∏è Khuy·∫øn ngh·ªã an to√†n:',
                value: '‚Ä¢ Test keyword tr∆∞·ªõc khi th√™m\n‚Ä¢ S·ª≠ d·ª•ng keywords c·ª• th·ªÉ\n‚Ä¢ Ki·ªÉm tra log th∆∞·ªùng xuy√™n\n‚Ä¢ Backup danh s√°ch th√†nh vi√™n\n‚Ä¢ C√≥ k·∫ø ho·∫°ch rollback',
                inline: false
            }
        ]);

        await message.reply({ embeds: [embed] });
    }
};
