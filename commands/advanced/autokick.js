const { hasFlexiblePermission } = require('../../utils/permissions');
const embedFactory = require('../../utils/embeds');
const logger = require('../../utils/logger');
const { ActionRowBuilder, ButtonBuilder, ButtonStyle, ComponentType } = require('discord.js');

module.exports = {
    name: 'autokick',
    description: 'H·ªá th·ªëng t·ª± ƒë·ªông kick th√†nh vi√™n theo ƒëi·ªÅu ki·ªán v√† rules',
    aliases: ['kickbot', 'autoremove', 'conditiokick'],
    usage: '!autokick <add|remove|list|toggle> [condition]',
    category: 'advanced',
    permissions: 'admin',
    guildOnly: true,
    examples: [
        '!autokick add inactive_30d',
        '!autokick add no_roles_7d',
        '!autokick add suspicious_account',
        '!autokick list',
        '!autokick toggle'
    ],

    // In-memory storage for autokick rules
    autoKickData: new Map(),

    async execute(message, args, client) {
        try {
            // Check permissions
            if (!await hasFlexiblePermission(message.member, 'autokick', this.permissions, message.guild.id)) {
                const embed = embedFactory.error(
                    'Kh√¥ng c√≥ quy·ªÅn!',
                    'L·ªánh n√†y c·∫ßn quy·ªÅn **Administrator** ho·∫∑c cao h∆°n.'
                );
                return message.reply({ embeds: [embed] });
            }

            // Initialize guild data
            if (!this.autoKickData.has(message.guild.id)) {
                this.autoKickData.set(message.guild.id, {
                    enabled: false,
                    rules: [],
                    whitelist: [],
                    stats: { kicked: 0, prevented: 0 }
                });
            }

            if (!args[0]) {
                return this.showStatus(message);
            }

            const action = args[0].toLowerCase();
            
            switch (action) {
                case 'add':
                case 'a':
                    if (!args[1]) {
                        return this.showRuleTypes(message);
                    }
                    await this.addRule(message, args[1]);
                    break;
                case 'remove':
                case 'r':
                case 'delete':
                    if (!args[1]) {
                        const embed = embedFactory.error(
                            'Thi·∫øu rule ID!',
                            'S·ª≠ d·ª•ng: `!autokick remove <rule_id>`\n\nXem danh s√°ch: `!autokick list`'
                        );
                        return message.reply({ embeds: [embed] });
                    }
                    await this.removeRule(message, args[1]);
                    break;
                case 'list':
                case 'l':
                    await this.listRules(message);
                    break;
                case 'toggle':
                case 't':
                    await this.toggleSystem(message);
                    break;
                case 'test':
                    await this.testRules(message);
                    break;
                case 'whitelist':
                case 'wl':
                    await this.manageWhitelist(message, args.slice(1));
                    break;
                default:
                    await this.showHelp(message);
                    break;
            }

        } catch (error) {
            logger.error('AutoKick command error', error);
            const embed = embedFactory.error(
                'L·ªói autokick!',
                'ƒê√£ x·∫£y ra l·ªói khi th·ª±c thi l·ªánh autokick.',
                error.message
            );
            await message.reply({ embeds: [embed] });
        }
    },

    async addRule(message, ruleType) {
        const guildData = this.autoKickData.get(message.guild.id);
        
        // Check if rule already exists
        if (guildData.rules.some(r => r.type === ruleType)) {
            const embed = embedFactory.warning(
                'Rule ƒë√£ t·ªìn t·∫°i!',
                `Rule \`${ruleType}\` ƒë√£ c√≥ trong h·ªá th·ªëng AutoKick.`
            );
            return message.reply({ embeds: [embed] });
        }

        const ruleConfig = this.getRuleConfig(ruleType);
        if (!ruleConfig) {
            return this.showRuleTypes(message);
        }

        const rule = {
            id: Date.now(),
            type: ruleType,
            ...ruleConfig,
            addedBy: message.author.id,
            addedAt: new Date().toISOString(),
            triggered: 0,
            lastTriggered: null
        };

        guildData.rules.push(rule);

        const embed = embedFactory.success(
            '‚úÖ ƒê√£ th√™m AutoKick rule!',
            `**Rule:** \`${ruleType}\`\n**M√¥ t·∫£:** ${ruleConfig.description}`
        );

        embed.addFields([
            {
                name: '‚öôÔ∏è ƒêi·ªÅu ki·ªán kick:',
                value: ruleConfig.condition,
                inline: false
            },
            {
                name: '‚ö†Ô∏è C·∫£nh b√°o:',
                value: 'Rule n√†y s·∫Ω **T·ª∞ ƒê·ªòNG KICK** th√†nh vi√™n n·∫øu ƒë√°p ·ª©ng ƒëi·ªÅu ki·ªán.\nKh√¥ng √°p d·ª•ng cho: Owner, Admin, Bot, Whitelist.',
                inline: false
            }
        ]);

        await message.reply({ embeds: [embed] });
        logger.command(message.author, `autokick add ${ruleType}`, message.guild);
    },

    async removeRule(message, ruleId) {
        const guildData = this.autoKickData.get(message.guild.id);
        const ruleIndex = guildData.rules.findIndex(r => r.id.toString() === ruleId || r.type === ruleId);
        
        if (ruleIndex === -1) {
            const embed = embedFactory.error(
                'Rule kh√¥ng t·ªìn t·∫°i!',
                `Rule v·ªõi ID \`${ruleId}\` kh√¥ng t√¨m th·∫•y.\n\nXem danh s√°ch: \`!autokick list\``
            );
            return message.reply({ embeds: [embed] });
        }

        const removedRule = guildData.rules[ruleIndex];
        guildData.rules.splice(ruleIndex, 1);

        const embed = embedFactory.success(
            '‚úÖ ƒê√£ x√≥a AutoKick rule!',
            `**Rule:** \`${removedRule.type}\`\n**ƒê√£ trigger:** ${removedRule.triggered} l·∫ßn`
        );

        await message.reply({ embeds: [embed] });
        logger.command(message.author, `autokick remove ${removedRule.type}`, message.guild);
    },

    async listRules(message) {
        const guildData = this.autoKickData.get(message.guild.id);

        if (guildData.rules.length === 0) {
            const embed = embedFactory.warning(
                'Kh√¥ng c√≥ AutoKick rules!',
                'Ch∆∞a c√≥ rule n√†o ƒë∆∞·ª£c thi·∫øt l·∫≠p.\n\nTh√™m rule: `!autokick add <rule_type>`\nXem types: `!autokick add`'
            );
            return message.reply({ embeds: [embed] });
        }

        const embed = embedFactory.info(
            '‚ö° AutoKick Rules',
            `**Server:** ${message.guild.name}\n**Tr·∫°ng th√°i:** ${guildData.enabled ? 'üü¢ Ho·∫°t ƒë·ªông' : 'üî¥ T·∫Øt'}\n**T·ªïng rules:** ${guildData.rules.length}`
        );

        const rulesList = guildData.rules.map((rule, index) => {
            const addedBy = message.guild.members.cache.get(rule.addedBy)?.user.tag || 'Unknown';
            const addedDate = new Date(rule.addedAt).toLocaleDateString('vi-VN');
            
            return `**${index + 1}.** \`${rule.type}\`\n` +
                   `‚îú M√¥ t·∫£: ${rule.description}\n` +
                   `‚îú Th√™m b·ªüi: ${addedBy}\n` +
                   `‚îú Ng√†y th√™m: ${addedDate}\n` +
                   `‚îú Triggered: ${rule.triggered} l·∫ßn\n` +
                   `‚îî ID: ${rule.id}`;
        }).join('\n\n');

        embed.addFields([{
            name: 'üìù Danh s√°ch Rules:',
            value: rulesList.length > 1000 ? rulesList.substring(0, 1000) + '...' : rulesList,
            inline: false
        }]);

        // Add control buttons
        const buttons = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('autokick_toggle')
                    .setLabel(guildData.enabled ? 'üî¥ T·∫Øt AutoKick' : 'üü¢ B·∫≠t AutoKick')
                    .setStyle(guildData.enabled ? ButtonStyle.Danger : ButtonStyle.Success),
                new ButtonBuilder()
                    .setCustomId('autokick_test')
                    .setLabel('üß™ Test Rules')
                    .setStyle(ButtonStyle.Secondary),
                new ButtonBuilder()
                    .setCustomId('autokick_stats')
                    .setLabel('üìä Statistics')
                    .setStyle(ButtonStyle.Secondary)
            );

        const msg = await message.reply({ embeds: [embed], components: [buttons] });

        // Handle button interactions
        const collector = msg.createMessageComponentCollector({
            componentType: ComponentType.Button,
            time: 300000
        });

        collector.on('collect', async (interaction) => {
            if (interaction.user.id !== message.author.id) {
                await interaction.reply({ 
                    content: 'Ch·ªâ ng∆∞·ªùi g·ªçi l·ªánh m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng!', 
                    ephemeral: true 
                });
                return;
            }

            await interaction.deferUpdate();
            
            switch (interaction.customId) {
                case 'autokick_toggle':
                    await this.toggleSystem(message, true);
                    break;
                case 'autokick_test':
                    await this.testRules(message);
                    break;
                case 'autokick_stats':
                    await this.showStats(message);
                    break;
            }
        });
    },

    async toggleSystem(message, isButton = false) {
        const guildData = this.autoKickData.get(message.guild.id);
        guildData.enabled = !guildData.enabled;

        const embed = embedFactory.success(
            `${guildData.enabled ? 'üü¢' : 'üî¥'} AutoKick ${guildData.enabled ? 'ƒê√£ B·∫¨T' : 'ƒê√£ T·∫ÆT'}!`,
            `H·ªá th·ªëng AutoKick ƒë√£ ƒë∆∞·ª£c **${guildData.enabled ? 'k√≠ch ho·∫°t' : 'v√¥ hi·ªáu h√≥a'}**.`
        );

        if (guildData.enabled && guildData.rules.length === 0) {
            embed.addFields([{
                name: '‚ö†Ô∏è L∆∞u √Ω:',
                value: 'AutoKick ƒë√£ b·∫≠t nh∆∞ng ch∆∞a c√≥ rule n√†o.\nTh√™m rule: `!autokick add <rule_type>`',
                inline: false
            }]);
        }

        if (!isButton) {
            await message.reply({ embeds: [embed] });
        }

        logger.command(message.author, `autokick ${guildData.enabled ? 'enable' : 'disable'}`, message.guild);
    },

    async showStatus(message) {
        const guildData = this.autoKickData.get(message.guild.id);

        const embed = embedFactory.info(
            '‚ö° AutoKick System Status',
            `**Server:** ${message.guild.name}`
        );

        embed.addFields([
            {
                name: '‚öôÔ∏è Tr·∫°ng th√°i h·ªá th·ªëng:',
                value: `**Status:** ${guildData.enabled ? 'üü¢ Ho·∫°t ƒë·ªông' : 'üî¥ T·∫Øt'}\n**Rules:** ${guildData.rules.length}\n**Total Kicks:** ${guildData.stats.kicked}\n**Prevented:** ${guildData.stats.prevented}`,
                inline: true
            },
            {
                name: 'üéØ AutoKick Conditions:',
                value: '‚Ä¢ Inactive members (30+ days)\n‚Ä¢ No roles assigned (7+ days)\n‚Ä¢ Suspicious accounts\n‚Ä¢ Custom conditions',
                inline: true
            },
            {
                name: 'üõ°Ô∏è Mi·ªÖn tr·ª´ AutoKick:',
                value: '‚Ä¢ Server Owner\n‚Ä¢ Bot Owner\n‚Ä¢ Administrator\n‚Ä¢ Bots\n‚Ä¢ Whitelist members',
                inline: true
            }
        ]);

        if (guildData.rules.length > 0) {
            const activeRules = guildData.rules
                .slice(0, 3)
                .map(r => `‚Ä¢ \`${r.type}\` (${r.triggered} kicks)`)
                .join('\n');
                
            embed.addFields([{
                name: 'üìù Active Rules:',
                value: activeRules,
                inline: false
            }]);
        }

        await message.reply({ embeds: [embed] });
    },

    async showRuleTypes(message) {
        const embed = embedFactory.help({
            title: '‚ö° AutoKick Rule Types',
            description: '**C√°c lo·∫°i rule AutoKick c√≥ s·∫µn**\n\nCh·ªçn rule type ph√π h·ª£p v·ªõi server',
            categories: [
                {
                    emoji: 'üò¥',
                    name: 'inactive_30d',
                    value: 'Kick members kh√¥ng ho·∫°t ƒë·ªông 30+ ng√†y'
                },
                {
                    emoji: 'üë•',
                    name: 'no_roles_7d',
                    value: 'Kick members kh√¥ng c√≥ role sau 7 ng√†y'
                },
                {
                    emoji: 'üîç',
                    name: 'suspicious_account',
                    value: 'Kick accounts nghi ng·ªù (t√™n random, avatar m·∫∑c ƒë·ªãnh)'
                },
                {
                    emoji: 'üìÖ',
                    name: 'new_account_spam',
                    value: 'Kick accounts m·ªõi t·∫°o (<7 ng√†y) spam'
                },
                {
                    emoji: '‚ö†Ô∏è',
                    name: 'multiple_violations',
                    value: 'Kick members c√≥ nhi·ªÅu vi ph·∫°m'
                }
            ]
        });

        embed.addFields([
            {
                name: 'üìù C√°ch s·ª≠ d·ª•ng:',
                value: '`!autokick add <rule_type>`\n\nV√≠ d·ª•: `!autokick add inactive_30d`',
                inline: true
            },
            {
                name: '‚ö†Ô∏è L∆∞u √Ω:',
                value: 'T·∫•t c·∫£ rules ƒë·ªÅu c√≥ safeguard ƒë·ªÉ tr√°nh kick nh·∫ßm admin/owner/bot.',
                inline: true
            }
        ]);

        await message.reply({ embeds: [embed] });
    },

    async showHelp(message) {
        const embed = embedFactory.help({
            title: '‚ö° AutoKick System Help',
            description: '**H·ªá th·ªëng t·ª± ƒë·ªông kick th√†nh vi√™n**\n\n‚ö†Ô∏è **S·ª≠ d·ª•ng c·∫©n th·∫≠n - c√≥ th·ªÉ kick nh·∫ßm!**',
            categories: [
                {
                    emoji: '‚ûï',
                    name: 'Add Rule',
                    value: '`!autokick add <rule_type>` - Th√™m rule autokick'
                },
                {
                    emoji: '‚ûñ',
                    name: 'Remove Rule',
                    value: '`!autokick remove <rule_id>` - X√≥a rule'
                },
                {
                    emoji: 'üìã',
                    name: 'List Rules',
                    value: '`!autokick list` - Xem t·∫•t c·∫£ rules'
                },
                {
                    emoji: 'üîÑ',
                    name: 'Toggle System',
                    value: '`!autokick toggle` - B·∫≠t/t·∫Øt AutoKick'
                },
                {
                    emoji: 'üß™',
                    name: 'Test Rules',
                    value: '`!autokick test` - Test rules v·ªõi members hi·ªán t·∫°i'
                }
            ]
        });

        embed.addFields([
            {
                name: '‚ö†Ô∏è C·∫£nh b√°o:',
                value: '‚Ä¢ AutoKick s·∫Ω kick NGAY L·∫¨P T·ª®C khi ƒë√∫ng ƒëi·ªÅu ki·ªán\n‚Ä¢ Kh√¥ng th·ªÉ undo sau khi kick\n‚Ä¢ C√≥ th·ªÉ kick nh·∫ßm th√†nh vi√™n t·ªët\n‚Ä¢ Ch·ªâ d√πng cho cleanup ƒë·ªãnh k·ª≥',
                inline: false
            },
            {
                name: 'üõ°Ô∏è An to√†n:',
                value: '‚Ä¢ Test rules tr∆∞·ªõc khi enable\n‚Ä¢ S·ª≠ d·ª•ng whitelist cho VIPs\n‚Ä¢ Monitor logs th∆∞·ªùng xuy√™n\n‚Ä¢ Backup member list\n‚Ä¢ C√≥ k·∫ø ho·∫°ch invite l·∫°i',
                inline: false
            }
        ]);

        await message.reply({ embeds: [embed] });
    },

    // Helper functions
    getRuleConfig(ruleType) {
        const rules = {
            'inactive_30d': {
                description: 'Kick members kh√¥ng ho·∫°t ƒë·ªông 30+ ng√†y',
                condition: 'Kh√¥ng g·ª≠i tin nh·∫Øn, reactions, ho·∫∑c join voice trong 30 ng√†y',
                severity: 'Medium',
                checkInterval: '24h'
            },
            'no_roles_7d': {
                description: 'Kick members kh√¥ng c√≥ role sau 7 ng√†y join',
                condition: 'Ch·ªâ c√≥ @everyone role sau 7 ng√†y trong server',
                severity: 'Low',
                checkInterval: '12h'
            },
            'suspicious_account': {
                description: 'Kick accounts nghi ng·ªù',
                condition: 'T√™n random + avatar m·∫∑c ƒë·ªãnh + kh√¥ng ho·∫°t ƒë·ªông',
                severity: 'High',
                checkInterval: '6h'
            },
            'new_account_spam': {
                description: 'Kick accounts m·ªõi spam',
                condition: 'Account < 7 ng√†y + spam messages',
                severity: 'High',
                checkInterval: '1h'
            },
            'multiple_violations': {
                description: 'Kick members vi ph·∫°m nhi·ªÅu l·∫ßn',
                condition: '3+ warnings ho·∫∑c mutes trong 30 ng√†y',
                severity: 'High',
                checkInterval: '24h'
            }
        };

        return rules[ruleType] || null;
    }
};