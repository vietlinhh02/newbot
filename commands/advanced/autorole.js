const { hasFlexiblePermission } = require('../../utils/permissions');
const embedFactory = require('../../utils/embeds');
const logger = require('../../utils/logger');
const { ActionRowBuilder, ButtonBuilder, ButtonStyle, ComponentType } = require('discord.js');

module.exports = {
    name: 'autorole',
    description: 'H·ªá th·ªëng t·ª± ƒë·ªông c·∫•p role theo ƒëi·ªÅu ki·ªán v√† ho·∫°t ƒë·ªông',
    aliases: ['autorank', 'levelrole', 'activityrole'],
    usage: '!autorole <add|remove|list|toggle> [condition] [role]',
    category: 'advanced',
    permissions: 'admin',
    guildOnly: true,
    examples: [
        '!autorole add messages_100 @Active',
        '!autorole add days_7 @Verified',
        '!autorole add voice_10h @Speaker',
        '!autorole list',
        '!autorole toggle'
    ],

    // In-memory storage for autorole rules
    autoRoleData: new Map(),

    async execute(message, args, client) {
        try {
            // Check permissions
            if (!await hasFlexiblePermission(message.member, 'autorole', this.permissions, message.guild.id)) {
                const embed = embedFactory.error(
                    'Kh√¥ng c√≥ quy·ªÅn!',
                    'L·ªánh n√†y c·∫ßn quy·ªÅn **Administrator** ho·∫∑c cao h∆°n.'
                );
                return message.reply({ embeds: [embed] });
            }

            // Initialize guild data
            if (!this.autoRoleData.has(message.guild.id)) {
                this.autoRoleData.set(message.guild.id, {
                    enabled: false,
                    rules: [],
                    stats: { assigned: 0, removed: 0 }
                });
            }

            if (!args[0]) {
                return this.showStatus(message);
            }

            const action = args[0].toLowerCase();
            
            switch (action) {
                case 'add':
                case 'a':
                    if (!args[1] || !args[2]) {
                        return this.showRuleTypes(message);
                    }
                    await this.addRule(message, args[1], args.slice(2).join(' '));
                    break;
                case 'remove':
                case 'r':
                case 'delete':
                    if (!args[1]) {
                        const embed = embedFactory.error(
                            'Thi·∫øu rule ID!',
                            'S·ª≠ d·ª•ng: `!autorole remove <rule_id>`\n\nXem danh s√°ch: `!autorole list`'
                        );
                        return message.reply({ embeds: [embed] });
                    }
                    await this.removeRule(message, args[1]);
                    break;
                case 'list':
                case 'l':
                    await this.listRules(message);
                    break;
                case 'toggle':
                case 't':
                    await this.toggleSystem(message);
                    break;
                case 'test':
                    await this.testRules(message, args[1]);
                    break;
                case 'scan':
                    await this.scanMembers(message);
                    break;
                default:
                    await this.showHelp(message);
                    break;
            }

        } catch (error) {
            logger.error('AutoRole command error', error);
            const embed = embedFactory.error(
                'L·ªói autorole!',
                'ƒê√£ x·∫£y ra l·ªói khi th·ª±c thi l·ªánh autorole.',
                error.message
            );
            await message.reply({ embeds: [embed] });
        }
    },

    async addRule(message, condition, roleInput) {
        const guildData = this.autoRoleData.get(message.guild.id);
        
        // Parse role
        const role = this.parseRole(message.guild, roleInput);
        if (!role) {
            const embed = embedFactory.error(
                'Role kh√¥ng t√¨m th·∫•y!',
                `Kh√¥ng th·ªÉ t√¨m th·∫•y role: \`${roleInput}\`\n\nS·ª≠ d·ª•ng: @role, role_name, ho·∫∑c role_id`
            );
            return message.reply({ embeds: [embed] });
        }

        // Check if rule already exists
        if (guildData.rules.some(r => r.condition === condition && r.roleId === role.id)) {
            const embed = embedFactory.warning(
                'Rule ƒë√£ t·ªìn t·∫°i!',
                `Rule \`${condition}\` cho role ${role} ƒë√£ c√≥ trong h·ªá th·ªëng.`
            );
            return message.reply({ embeds: [embed] });
        }

        const ruleConfig = this.getRuleConfig(condition);
        if (!ruleConfig) {
            return this.showRuleTypes(message);
        }

        // Check role permissions
        if (role.position >= message.guild.members.me.roles.highest.position) {
            const embed = embedFactory.error(
                'Role qu√° cao!',
                `Bot kh√¥ng th·ªÉ qu·∫£n l√Ω role ${role} v√¨ n√≥ cao h∆°n role c·ªßa bot.`
            );
            return message.reply({ embeds: [embed] });
        }

        const rule = {
            id: Date.now(),
            condition: condition,
            roleId: role.id,
            roleName: role.name,
            ...ruleConfig,
            addedBy: message.author.id,
            addedAt: new Date().toISOString(),
            triggered: 0,
            lastTriggered: null
        };

        guildData.rules.push(rule);

        const embed = embedFactory.success(
            '‚úÖ ƒê√£ th√™m AutoRole rule!',
            `**ƒêi·ªÅu ki·ªán:** \`${condition}\`\n**Role:** ${role}\n**M√¥ t·∫£:** ${ruleConfig.description}`
        );

        embed.addFields([
            {
                name: '‚öôÔ∏è Chi ti·∫øt rule:',
                value: `**Requirement:** ${ruleConfig.requirement}\n**Type:** ${ruleConfig.type}\n**Check Interval:** ${ruleConfig.checkInterval}`,
                inline: true
            },
            {
                name: 'üéØ √Åp d·ª•ng cho:',
                value: 'T·∫•t c·∫£ th√†nh vi√™n ƒë√°p ·ª©ng ƒëi·ªÅu ki·ªán s·∫Ω t·ª± ƒë·ªông ƒë∆∞·ª£c c·∫•p role n√†y.',
                inline: true
            }
        ]);

        await message.reply({ embeds: [embed] });
        logger.command(message.author, `autorole add ${condition} ${role.name}`, message.guild);
    },

    async removeRule(message, ruleId) {
        const guildData = this.autoRoleData.get(message.guild.id);
        const ruleIndex = guildData.rules.findIndex(r => r.id.toString() === ruleId || r.condition === ruleId);
        
        if (ruleIndex === -1) {
            const embed = embedFactory.error(
                'Rule kh√¥ng t·ªìn t·∫°i!',
                `Rule v·ªõi ID \`${ruleId}\` kh√¥ng t√¨m th·∫•y.\n\nXem danh s√°ch: \`!autorole list\``
            );
            return message.reply({ embeds: [embed] });
        }

        const removedRule = guildData.rules[ruleIndex];
        guildData.rules.splice(ruleIndex, 1);

        const embed = embedFactory.success(
            '‚úÖ ƒê√£ x√≥a AutoRole rule!',
            `**Rule:** \`${removedRule.condition}\`\n**Role:** ${removedRule.roleName}\n**ƒê√£ trigger:** ${removedRule.triggered} l·∫ßn`
        );

        await message.reply({ embeds: [embed] });
        logger.command(message.author, `autorole remove ${removedRule.condition}`, message.guild);
    },

    async listRules(message) {
        const guildData = this.autoRoleData.get(message.guild.id);

        if (guildData.rules.length === 0) {
            const embed = embedFactory.warning(
                'Kh√¥ng c√≥ AutoRole rules!',
                'Ch∆∞a c√≥ rule n√†o ƒë∆∞·ª£c thi·∫øt l·∫≠p.\n\nTh√™m rule: `!autorole add <condition> <role>`\nXem conditions: `!autorole add`'
            );
            return message.reply({ embeds: [embed] });
        }

        const embed = embedFactory.info(
            'üé≠ AutoRole Rules',
            `**Server:** ${message.guild.name}\n**Tr·∫°ng th√°i:** ${guildData.enabled ? 'üü¢ Ho·∫°t ƒë·ªông' : 'üî¥ T·∫Øt'}\n**T·ªïng rules:** ${guildData.rules.length}`
        );

        const rulesList = guildData.rules.map((rule, index) => {
            const role = message.guild.roles.cache.get(rule.roleId);
            const roleDisplay = role ? role.toString() : `Deleted Role (${rule.roleName})`;
            const addedBy = message.guild.members.cache.get(rule.addedBy)?.user.tag || 'Unknown';
            
            return `**${index + 1}.** \`${rule.condition}\` ‚Üí ${roleDisplay}\n` +
                   `‚îú Requirement: ${rule.requirement}\n` +
                   `‚îú Type: ${rule.type}\n` +
                   `‚îú Triggered: ${rule.triggered} l·∫ßn\n` +
                   `‚îú Added by: ${addedBy}\n` +
                   `‚îî ID: ${rule.id}`;
        }).join('\n\n');

        embed.addFields([{
            name: 'üìù Danh s√°ch Rules:',
            value: rulesList.length > 1000 ? rulesList.substring(0, 1000) + '...' : rulesList,
            inline: false
        }]);

        // Add control buttons
        const buttons = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('autorole_toggle')
                    .setLabel(guildData.enabled ? 'üî¥ T·∫Øt AutoRole' : 'üü¢ B·∫≠t AutoRole')
                    .setStyle(guildData.enabled ? ButtonStyle.Danger : ButtonStyle.Success),
                new ButtonBuilder()
                    .setCustomId('autorole_scan')
                    .setLabel('üîç Scan Members')
                    .setStyle(ButtonStyle.Primary),
                new ButtonBuilder()
                    .setCustomId('autorole_stats')
                    .setLabel('üìä Statistics')
                    .setStyle(ButtonStyle.Secondary)
            );

        const msg = await message.reply({ embeds: [embed], components: [buttons] });

        // Handle button interactions
        const collector = msg.createMessageComponentCollector({
            componentType: ComponentType.Button,
            time: 300000
        });

        collector.on('collect', async (interaction) => {
            if (interaction.user.id !== message.author.id) {
                await interaction.reply({ 
                    content: 'Ch·ªâ ng∆∞·ªùi g·ªçi l·ªánh m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng!', 
                    ephemeral: true 
                });
                return;
            }

            await interaction.deferUpdate();
            
            switch (interaction.customId) {
                case 'autorole_toggle':
                    await this.toggleSystem(message, true);
                    break;
                case 'autorole_scan':
                    await this.scanMembers(message);
                    break;
                case 'autorole_stats':
                    await this.showStats(message);
                    break;
            }
        });
    },

    async toggleSystem(message, isButton = false) {
        const guildData = this.autoRoleData.get(message.guild.id);
        guildData.enabled = !guildData.enabled;

        const embed = embedFactory.success(
            `${guildData.enabled ? 'üü¢' : 'üî¥'} AutoRole ${guildData.enabled ? 'ƒê√£ B·∫¨T' : 'ƒê√£ T·∫ÆT'}!`,
            `H·ªá th·ªëng AutoRole ƒë√£ ƒë∆∞·ª£c **${guildData.enabled ? 'k√≠ch ho·∫°t' : 'v√¥ hi·ªáu h√≥a'}**.`
        );

        if (guildData.enabled && guildData.rules.length === 0) {
            embed.addFields([{
                name: '‚ö†Ô∏è L∆∞u √Ω:',
                value: 'AutoRole ƒë√£ b·∫≠t nh∆∞ng ch∆∞a c√≥ rule n√†o.\nTh√™m rule: `!autorole add <condition> <role>`',
                inline: false
            }]);
        }

        if (!isButton) {
            await message.reply({ embeds: [embed] });
        }

        logger.command(message.author, `autorole ${guildData.enabled ? 'enable' : 'disable'}`, message.guild);
    },

    async showStatus(message) {
        const guildData = this.autoRoleData.get(message.guild.id);

        const embed = embedFactory.info(
            'üé≠ AutoRole System Status',
            `**Server:** ${message.guild.name}`
        );

        embed.addFields([
            {
                name: '‚öôÔ∏è Tr·∫°ng th√°i h·ªá th·ªëng:',
                value: `**Status:** ${guildData.enabled ? 'üü¢ Ho·∫°t ƒë·ªông' : 'üî¥ T·∫Øt'}\n**Rules:** ${guildData.rules.length}\n**Roles Assigned:** ${guildData.stats.assigned}\n**Roles Removed:** ${guildData.stats.removed}`,
                inline: true
            },
            {
                name: 'üéØ AutoRole Types:',
                value: '‚Ä¢ Activity-based roles\n‚Ä¢ Time-based roles\n‚Ä¢ Level/XP roles\n‚Ä¢ Achievement roles',
                inline: true
            },
            {
                name: 'üìà Benefits:',
                value: '‚Ä¢ T·ª± ƒë·ªông reward active members\n‚Ä¢ Khuy·∫øn kh√≠ch participation\n‚Ä¢ Gi·∫£m workload cho mods\n‚Ä¢ T·∫°o hierarchy r√µ r√†ng',
                inline: true
            }
        ]);

        if (guildData.rules.length > 0) {
            const activeRules = guildData.rules
                .slice(0, 3)
                .map(r => `‚Ä¢ \`${r.condition}\` ‚Üí ${r.roleName} (${r.triggered} assignments)`)
                .join('\n');
                
            embed.addFields([{
                name: 'üìù Active Rules:',
                value: activeRules,
                inline: false
            }]);
        }

        await message.reply({ embeds: [embed] });
    },

    async showRuleTypes(message) {
        const embed = embedFactory.help({
            title: 'üé≠ AutoRole Conditions',
            description: '**C√°c ƒëi·ªÅu ki·ªán AutoRole c√≥ s·∫µn**\n\nCh·ªçn condition ph√π h·ª£p ƒë·ªÉ auto-assign roles',
            categories: [
                {
                    emoji: 'üí¨',
                    name: 'messages_X',
                    value: 'C·∫•p role khi g·ª≠i X tin nh·∫Øn\nVD: `messages_100`'
                },
                {
                    emoji: 'üìÖ',
                    name: 'days_X',
                    value: 'C·∫•p role khi ·ªü server X ng√†y\nVD: `days_7`'
                },
                {
                    emoji: 'üîä',
                    name: 'voice_Xh',
                    value: 'C·∫•p role khi ·ªü voice X gi·ªù\nVD: `voice_10h`'
                },
                {
                    emoji: '‚ù§Ô∏è',
                    name: 'reactions_X',
                    value: 'C·∫•p role khi react X l·∫ßn\nVD: `reactions_50`'
                },
                {
                    emoji: 'üèÜ',
                    name: 'level_X',
                    value: 'C·∫•p role khi ƒë·∫°t level X\nVD: `level_5`'
                }
            ]
        });

        embed.addFields([
            {
                name: 'üìù C√°ch s·ª≠ d·ª•ng:',
                value: '`!autorole add <condition> <@role>`\n\nV√≠ d·ª•: `!autorole add messages_100 @Active Member`',
                inline: true
            },
            {
                name: '‚ö†Ô∏è L∆∞u √Ω:',
                value: 'Bot c·∫ßn c√≥ quy·ªÅn Manage Roles v√† role c·ªßa bot ph·∫£i cao h∆°n role ƒë∆∞·ª£c assign.',
                inline: true
            }
        ]);

        await message.reply({ embeds: [embed] });
    },

    async showHelp(message) {
        const embed = embedFactory.help({
            title: 'üé≠ AutoRole System Help',
            description: '**H·ªá th·ªëng t·ª± ƒë·ªông c·∫•p role**\n\nT·ª± ƒë·ªông reward members d·ª±a tr√™n ho·∫°t ƒë·ªông',
            categories: [
                {
                    emoji: '‚ûï',
                    name: 'Add Rule',
                    value: '`!autorole add <condition> <role>` - Th√™m rule auto-assign'
                },
                {
                    emoji: '‚ûñ',
                    name: 'Remove Rule',
                    value: '`!autorole remove <rule_id>` - X√≥a rule'
                },
                {
                    emoji: 'üìã',
                    name: 'List Rules',
                    value: '`!autorole list` - Xem t·∫•t c·∫£ rules'
                },
                {
                    emoji: 'üîÑ',
                    name: 'Toggle System',
                    value: '`!autorole toggle` - B·∫≠t/t·∫Øt AutoRole'
                },
                {
                    emoji: 'üîç',
                    name: 'Scan Members',
                    value: '`!autorole scan` - Qu√©t v√† assign roles cho existing members'
                }
            ]
        });

        embed.addFields([
            {
                name: 'üéØ Use Cases:',
                value: '‚Ä¢ Reward active chatters\n‚Ä¢ Verify long-time members\n‚Ä¢ Recognize voice participants\n‚Ä¢ Create engagement hierarchy\n‚Ä¢ Automate member progression',
                inline: true
            },
            {
                name: '‚úÖ Best Practices:',
                value: '‚Ä¢ T·ª´ t·ª´ tƒÉng requirements\n‚Ä¢ Test v·ªõi 1-2 rules tr∆∞·ªõc\n‚Ä¢ Monitor role assignments\n‚Ä¢ Backup roles tr∆∞·ªõc khi thay ƒë·ªïi\n‚Ä¢ Communicate v·ªõi members',
                inline: true
            }
        ]);

        await message.reply({ embeds: [embed] });
    },

    // Helper functions
    parseRole(guild, roleInput) {
        // Try role mention first
        const mentionMatch = roleInput.match(/^<@&(\d+)>$/);
        if (mentionMatch) {
            return guild.roles.cache.get(mentionMatch[1]);
        }

        // Try role ID
        if (/^\d+$/.test(roleInput)) {
            return guild.roles.cache.get(roleInput);
        }

        // Try role name
        return guild.roles.cache.find(role => 
            role.name.toLowerCase() === roleInput.toLowerCase()
        );
    },

    getRuleConfig(condition) {
        const configs = {
            // Message-based rules
            messages_50: { description: 'C·∫•p role khi g·ª≠i 50 tin nh·∫Øn', requirement: '50 messages', type: 'Activity', checkInterval: '1h' },
            messages_100: { description: 'C·∫•p role khi g·ª≠i 100 tin nh·∫Øn', requirement: '100 messages', type: 'Activity', checkInterval: '1h' },
            messages_500: { description: 'C·∫•p role khi g·ª≠i 500 tin nh·∫Øn', requirement: '500 messages', type: 'Activity', checkInterval: '6h' },
            
            // Time-based rules
            days_1: { description: 'C·∫•p role khi ·ªü server 1 ng√†y', requirement: '1 day membership', type: 'Time', checkInterval: '1h' },
            days_7: { description: 'C·∫•p role khi ·ªü server 7 ng√†y', requirement: '7 days membership', type: 'Time', checkInterval: '6h' },
            days_30: { description: 'C·∫•p role khi ·ªü server 30 ng√†y', requirement: '30 days membership', type: 'Time', checkInterval: '24h' },
            
            // Voice-based rules
            voice_1h: { description: 'C·∫•p role khi ·ªü voice 1 gi·ªù', requirement: '1 hour voice time', type: 'Voice', checkInterval: '1h' },
            voice_10h: { description: 'C·∫•p role khi ·ªü voice 10 gi·ªù', requirement: '10 hours voice time', type: 'Voice', checkInterval: '6h' },
            
            // Reaction-based rules
            reactions_25: { description: 'C·∫•p role khi react 25 l·∫ßn', requirement: '25 reactions given', type: 'Engagement', checkInterval: '1h' },
            reactions_100: { description: 'C·∫•p role khi react 100 l·∫ßn', requirement: '100 reactions given', type: 'Engagement', checkInterval: '6h' },
            
            // Level-based rules (if level system exists)
            level_5: { description: 'C·∫•p role khi ƒë·∫°t level 5', requirement: 'Level 5', type: 'Level', checkInterval: '1h' },
            level_10: { description: 'C·∫•p role khi ƒë·∫°t level 10', requirement: 'Level 10', type: 'Level', checkInterval: '6h' }
        };

        return configs[condition] || null;
    }
};