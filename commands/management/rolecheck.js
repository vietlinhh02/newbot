const { EmbedBuilder } = require('discord.js');

module.exports = {
    name: 'rolecheck',
    aliases: ['checkrole', 'hierarchy', 'rc'],
    description: 'Ki·ªÉm tra role hierarchy v√† ƒë∆∞a ra h∆∞·ªõng d·∫´n fix bot permissions',
    usage: '!rolecheck [role_name]',
    examples: [
        '!rolecheck',
        '!rc VIP 8',
        '!hierarchy'
    ],
    permissions: 'admin',
    guildOnly: true,
    category: 'management',

    async execute(message, args, client) {
        try {
            const guild = message.guild;
            const botMember = guild.members.me;
            const botHighestRole = botMember.roles.highest;

            // If specific role provided, check that role
            if (args.length > 0) {
                const roleName = args.join(' ');
                const targetRole = guild.roles.cache.find(r => 
                    r.name.toLowerCase().includes(roleName.toLowerCase())
                );

                if (!targetRole) {
                    return message.reply(`‚ùå Kh√¥ng t√¨m th·∫•y role v·ªõi t√™n: **${roleName}**`);
                }

                return this.checkSpecificRole(message, targetRole, botMember, botHighestRole);
            }

            // General hierarchy check
            const allRoles = guild.roles.cache.sort((a, b) => b.position - a.position);
            const problemRoles = allRoles.filter(role => 
                role.id !== guild.id && // Not @everyone
                role.position >= botHighestRole.position && // Higher or equal to bot
                !role.managed // Not bot/integration roles
            );

            const vipRoles = allRoles.filter(role => 
                role.name.toLowerCase().includes('vip') ||
                role.name.toLowerCase().includes('premium') ||
                role.name.toLowerCase().includes('booster')
            );

            const embed = new EmbedBuilder()
                .setTitle('üèóÔ∏è Role Hierarchy Check')
                .setColor(problemRoles.size > 0 ? 0xe74c3c : 0x2ecc71)
                .setThumbnail(guild.iconURL())
                .setTimestamp();

            // Bot info
            embed.addFields({
                name: 'ü§ñ Bot Information',
                value: 
                    `**Bot Role:** ${botHighestRole}\n` +
                    `**V·ªã tr√≠:** ${botHighestRole.position}\n` +
                    `**C√≥ th·ªÉ qu·∫£n l√Ω:** ${allRoles.filter(r => r.position < botHighestRole.position && r.id !== guild.id).size} roles`,
                inline: true
            });

            // Problem roles
            if (problemRoles.size > 0) {
                const problemList = problemRoles.map(role => 
                    `‚Ä¢ ${role} (v·ªã tr√≠ ${role.position})`
                ).slice(0, 10).join('\n');

                embed.addFields({
                    name: `‚ùå Roles bot KH√îNG th·ªÉ qu·∫£n l√Ω (${problemRoles.size})`,
                    value: problemList + (problemRoles.size > 10 ? '\n*...v√† nhi·ªÅu h∆°n*' : ''),
                    inline: true
                });
            }

            // VIP roles status
            if (vipRoles.length > 0) {
                const vipList = vipRoles.map(role => {
                    const canManage = role.position < botHighestRole.position;
                    const status = canManage ? '‚úÖ' : '‚ùå';
                    return `${status} ${role} (${role.position})`;
                }).slice(0, 8).join('\n');

                embed.addFields({
                    name: 'üåü VIP/Premium Roles Status',
                    value: vipList,
                    inline: false
                });
            }

            // Solution guide
            if (problemRoles.size > 0) {
                embed.addFields({
                    name: 'üîß C√°ch kh·∫Øc ph·ª•c',
                    value: 
                        '**B∆∞·ªõc 1:** V√†o Server Settings ‚Üí Roles\n' +
                        '**B∆∞·ªõc 2:** T√¨m bot role trong danh s√°ch\n' +
                        '**B∆∞·ªõc 3:** K√©o th·∫£ bot role l√™n tr√™n t·∫•t c·∫£ VIP roles\n' +
                        '**B∆∞·ªõc 4:** Ch·∫°y `!rolecheck` ƒë·ªÉ ki·ªÉm tra l·∫°i\n' +
                        '\n**L∆∞u √Ω:** Bot role ph·∫£i c√≥ v·ªã tr√≠ cao h∆°n roles mu·ªën qu·∫£n l√Ω',
                    inline: false
                });

                embed.addFields({
                    name: 'üí° Tips',
                    value: 
                        '‚Ä¢ V·ªã tr√≠ role c√†ng cao = s·ªë v·ªã tr√≠ c√†ng l·ªõn\n' +
                        '‚Ä¢ Bot kh√¥ng th·ªÉ qu·∫£n l√Ω roles cao h∆°n ho·∫∑c b·∫±ng n√≥\n' +
                        '‚Ä¢ Owner server c√≥ th·ªÉ assign b·∫•t k·ª≥ role n√†o\n' +
                        '‚Ä¢ D√πng `!lr assignable` ƒë·ªÉ xem roles c√≥ th·ªÉ assign',
                    inline: false
                });
            } else {
                embed.addFields({
                    name: '‚úÖ Hierarchy Status',
                    value: 
                        '**Tuy·ªát v·ªùi!** Bot c√≥ th·ªÉ qu·∫£n l√Ω t·∫•t c·∫£ roles c·∫ßn thi·∫øt.\n' +
                        'B·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng `!temprole` v·ªõi m·ªçi role ƒë∆∞·ª£c hi·ªÉn th·ªã.',
                    inline: false
                });
            }

            await message.reply({ embeds: [embed] });

        } catch (error) {
            console.error('Error in rolecheck command:', error);
            await message.reply(`‚ùå L·ªói khi ki·ªÉm tra roles: ${error.message}`);
        }
    },

    async checkSpecificRole(message, targetRole, botMember, botHighestRole) {
        const canManage = targetRole.position < botHighestRole.position;
        const canUserAssign = targetRole.position < message.member.roles.highest.position || 
                             message.guild.ownerId === message.author.id;

        const embed = new EmbedBuilder()
            .setTitle(`üîç Role Check: ${targetRole.name}`)
            .setColor(canManage ? 0x2ecc71 : 0xe74c3c)
            .setTimestamp();

        embed.addFields(
            {
                name: 'üìä Role Information',
                value: 
                    `**Role:** ${targetRole}\n` +
                    `**V·ªã tr√≠:** ${targetRole.position}\n` +
                    `**Members:** ${targetRole.members.size}\n` +
                    `**M√†u:** ${targetRole.hexColor}\n` +
                    `**Hoisted:** ${targetRole.hoist ? 'C√≥' : 'Kh√¥ng'}\n` +
                    `**Mentionable:** ${targetRole.mentionable ? 'C√≥' : 'Kh√¥ng'}`,
                inline: true
            },
            {
                name: 'ü§ñ Bot Permissions',
                value: 
                    `**Bot role:** ${botHighestRole} (${botHighestRole.position})\n` +
                    `**C√≥ th·ªÉ qu·∫£n l√Ω:** ${canManage ? '‚úÖ C√≥' : '‚ùå Kh√¥ng'}\n` +
                    `**L√Ω do:** ${canManage ? 'Role th·∫•p h∆°n bot' : 'Role cao h∆°n/b·∫±ng bot'}`,
                inline: true
            },
            {
                name: 'üë§ Your Permissions',
                value: 
                    `**Highest role:** ${message.member.roles.highest.name}\n` +
                    `**C√≥ th·ªÉ assign:** ${canUserAssign ? '‚úÖ C√≥' : '‚ùå Kh√¥ng'}\n` +
                    `**V·ªõi temprole:** ${canManage && canUserAssign ? '‚úÖ C√≥ th·ªÉ d√πng' : '‚ùå Kh√¥ng th·ªÉ d√πng'}`,
                inline: false
            }
        );

        if (!canManage) {
            const higherRoles = message.guild.roles.cache.filter(r => 
                r.position >= targetRole.position && r.position < botHighestRole.position
            ).size;

            embed.addFields({
                name: 'üîß C√°ch kh·∫Øc ph·ª•c',
                value: 
                    `**ƒê·ªÉ bot c√≥ th·ªÉ qu·∫£n l√Ω role n√†y:**\n` +
                    `1. V√†o Server Settings ‚Üí Roles\n` +
                    `2. K√©o bot role l√™n tr√™n **${targetRole.name}**\n` +
                    `3. Bot role c·∫ßn v·ªã tr√≠ > ${targetRole.position}\n` +
                    `4. C√≥ ${higherRoles} roles c·∫ßn di chuy·ªÉn`,
                inline: false
            });
        }

        await message.reply({ embeds: [embed] });
    }
}; 