const { exec } = require('child_process');
const { EmbedBuilder } = require('discord.js');

module.exports = {
    name: 'update',
    aliases: ['pull', 'git-update'],
    description: 'C·∫≠p nh·∫≠t bot t·ª´ GitHub repository (ch·ªâ owner)',
    usage: '!update [force]',
    examples: [
        '!update',
        '!update force'
    ],
    permissions: 'owner',
    guildOnly: false,
    category: 'management',

    async execute(message, args, client) {
        try {
            // Check if user is bot owner
            const ownerId = process.env.OWNER_ID || '463640391776894977'; // Default owner ID
            if (message.author.id !== ownerId) {
                return message.reply('‚ùå Ch·ªâ owner bot m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y!');
            }

            const isForce = args[0] === 'force';
            
            // Send initial message
            const updateEmbed = new EmbedBuilder()
                .setTitle('üîÑ ƒêang c·∫≠p nh·∫≠t bot...')
                .setDescription('Pulling code t·ª´ GitHub repository...')
                .setColor(0xffaa00)
                .addFields({
                    name: 'üìã C√°c b∆∞·ªõc th·ª±c hi·ªán',
                    value: '‚Ä¢ Ki·ªÉm tra Git status\n‚Ä¢ Pull code m·ªõi\n‚Ä¢ Install dependencies\n‚Ä¢ Restart bot',
                    inline: false
                })
                .setTimestamp();

            const msg = await message.reply({ embeds: [updateEmbed] });

            // Update process
            const updateSteps = [];

            // Step 1: Check git status
            updateSteps.push(new Promise((resolve) => {
                exec('git status --porcelain', (error, stdout, stderr) => {
                    if (error) {
                        resolve({ step: 'Git Status', success: false, output: stderr });
                    } else {
                        const hasChanges = stdout.trim().length > 0;
                        resolve({ 
                            step: 'Git Status', 
                            success: true, 
                            output: hasChanges ? 'C√≥ thay ƒë·ªïi local' : 'Clean working tree',
                            hasChanges 
                        });
                    }
                });
            }));

            // Step 2: Stash changes if needed
            updateSteps.push(new Promise((resolve) => {
                if (isForce) {
                    exec('git stash', (error, stdout, stderr) => {
                        resolve({ 
                            step: 'Git Stash', 
                            success: !error, 
                            output: error ? stderr : 'Changes stashed' 
                        });
                    });
                } else {
                    resolve({ step: 'Git Stash', success: true, output: 'Skipped (no force)' });
                }
            }));

            // Step 3: Pull from GitHub
            updateSteps.push(new Promise((resolve) => {
                exec('git pull origin main', (error, stdout, stderr) => {
                    if (error) {
                        resolve({ step: 'Git Pull', success: false, output: stderr });
                    } else {
                        resolve({ 
                            step: 'Git Pull', 
                            success: true, 
                            output: stdout.includes('Already up to date') ? 'ƒê√£ up to date' : 'Pulled changes' 
                        });
                    }
                });
            }));

            // Step 4: Install dependencies
            updateSteps.push(new Promise((resolve) => {
                exec('npm install', (error, stdout, stderr) => {
                    if (error) {
                        resolve({ step: 'NPM Install', success: false, output: stderr });
                    } else {
                        resolve({ step: 'NPM Install', success: true, output: 'Dependencies updated' });
                    }
                });
            }));

            // Execute steps sequentially
            const results = [];
            for (const stepPromise of updateSteps) {
                const result = await stepPromise;
                results.push(result);
                
                // Update embed with progress
                const progressEmbed = new EmbedBuilder()
                    .setTitle('üîÑ Update Progress')
                    .setColor(result.success ? 0x00ff00 : 0xff0000)
                    .setDescription(`**${result.step}:** ${result.success ? '‚úÖ' : '‚ùå'} ${result.output}`)
                    .addFields({
                        name: 'üìä Progress',
                        value: `${results.length}/${updateSteps.length} steps completed`,
                        inline: true
                    })
                    .setTimestamp();

                await msg.edit({ embeds: [progressEmbed] });

                // If step failed and not force, stop
                if (!result.success && !isForce) {
                    const errorEmbed = new EmbedBuilder()
                        .setTitle('‚ùå Update Failed')
                        .setDescription(`Update d·ª´ng t·∫°i b∆∞·ªõc: **${result.step}**`)
                        .addFields({
                            name: 'üí° Gi·∫£i ph√°p',
                            value: `‚Ä¢ D√πng \`!update force\` ƒë·ªÉ force update\n‚Ä¢ Check logs v√† fix th·ªß c√¥ng\n‚Ä¢ Li√™n h·ªá developer`,
                            inline: false
                        })
                        .setColor(0xff0000)
                        .setTimestamp();
                    
                    return msg.edit({ embeds: [errorEmbed] });
                }
            }

            // All steps completed
            const allSuccess = results.every(r => r.success);
            
            const finalEmbed = new EmbedBuilder()
                .setTitle(allSuccess ? '‚úÖ Update th√†nh c√¥ng!' : '‚ö†Ô∏è Update ho√†n th√†nh v·ªõi warnings')
                .setDescription(allSuccess ? 
                    'Bot ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng t·ª´ GitHub!' : 
                    'Update ho√†n th√†nh nh∆∞ng c√≥ m·ªôt s·ªë l·ªói. Bot v·∫´n c√≥ th·ªÉ ho·∫°t ƒë·ªông.')
                .setColor(allSuccess ? 0x00ff00 : 0xffaa00)
                .addFields({
                    name: 'üìã K·∫øt qu·∫£ chi ti·∫øt',
                    value: results.map(r => `${r.success ? '‚úÖ' : '‚ùå'} **${r.step}:** ${r.output}`).join('\n'),
                    inline: false
                })
                .setTimestamp();

            if (allSuccess) {
                finalEmbed.addFields({
                    name: 'üîÑ Restart Bot',
                    value: 'Bot s·∫Ω t·ª± ƒë·ªông restart sau 5 gi√¢y...',
                    inline: false
                });

                await msg.edit({ embeds: [finalEmbed] });

                // Auto restart if using PM2
                setTimeout(() => {
                    exec('pm2 restart newbot', (error) => {
                        if (error) {
                            // Fallback restart
                            console.log('üîÑ Restarting bot...');
                            process.exit(0);
                        }
                    });
                }, 5000);
            } else {
                await msg.edit({ embeds: [finalEmbed] });
            }

        } catch (error) {
            console.error('Error in update command:', error);
            
            const errorEmbed = new EmbedBuilder()
                .setTitle('‚ùå Update Error')
                .setDescription(`L·ªói trong qu√° tr√¨nh update: ${error.message}`)
                .setColor(0xff0000)
                .setTimestamp();
                
            await message.reply({ embeds: [errorEmbed] });
        }
    }
}; 