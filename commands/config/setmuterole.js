const { hasFlexiblePermission } = require('../../utils/permissions');
const productionStyle = require('../../utils/demoStyle');

module.exports = {
    name: 'setmuterole',
    aliases: ['muterole'],
    description: 'Thi·∫øt l·∫≠p role mute cho l·ªánh mute',
    usage: '!setmuterole [@role|disable]',
    examples: [
        '!setmuterole @Muted',
        '!setmuterole disable'
    ],
    permissions: 'admin',
    guildOnly: true,
    category: 'config',
    
    async execute(message, args, client) {
        // Check permissions
        if (!await hasFlexiblePermission(message.member, 'setmuterole', this.permissions, message.guild.id)) {
            const result = productionStyle.createErrorEmbed(
                'Permission Denied',
                'B·∫°n c·∫ßn quy·ªÅn **Administrator** ƒë·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y.'
            );
            return message.reply({ 
                embeds: [result.embed], 
                files: result.attachments 
            });
        }

        // Show setup recommendation if no args
        if (!args.length) {
            // Get current settings
            const guildSettings = await client.prisma.guildSettings.findUnique({
                where: { guildId: message.guild.id }
            });
            
            const currentRole = guildSettings?.muteRole ? 
                `<@&${guildSettings.muteRole}>` : 'Ch∆∞a c·∫•u h√¨nh';
            
            const result = productionStyle.createInfoEmbed(
                'MUTE ROLE SETUP GUIDE',
                { tag: 'Configuration Helper' },
                message.author,
                'Thay v√¨ c·∫•u h√¨nh t·ª´ng l·ªánh ri√™ng bi·ªát, b·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng Setup Wizard!',
                [
                    { 
                        name: 'üöÄ Setup Wizard (Recommended)', 
                        value: '‚Ä¢ Giao di·ªán tr·ª±c quan v·ªõi buttons\n‚Ä¢ T·ª± ƒë·ªông t·∫°o role @Muted n·∫øu ch∆∞a c√≥\n‚Ä¢ C·∫•u h√¨nh permissions cho t·∫•t c·∫£ channels\n‚Ä¢ H∆∞·ªõng d·∫´n chi ti·∫øt t·ª´ng b∆∞·ªõc\n\n**Command:** `!setup`' 
                    },
                    { 
                        name: 'üìä Current Configuration', 
                        value: `üé≠ **Mute Role:** ${currentRole}` 
                    },
                    { 
                        name: 'üìù Manual Configuration', 
                        value: '‚Ä¢ `!setmuterole @role` - Thi·∫øt l·∫≠p mute role\n‚Ä¢ `!setmuterole disable` - T·∫Øt mute role\n\n**Example:** `!setmuterole @Muted`' 
                    },
                    { 
                        name: 'üéØ Mute Role Features', 
                        value: '‚Ä¢ T·ª± ƒë·ªông √°p d·ª•ng khi d√πng `!mute`\n‚Ä¢ NgƒÉn g·ª≠i tin nh·∫Øn v√† n√≥i voice\n‚Ä¢ T∆∞∆°ng th√≠ch v·ªõi timeout Discord\n‚Ä¢ Qu·∫£n l√Ω permissions t·ª± ƒë·ªông' 
                    }
                ]
            );
            return message.reply({ 
                embeds: [result.embed], 
                files: result.attachments 
            });
        }

        try {
            // Get current settings
            const guildSettings = await client.prisma.guildSettings.findUnique({
                where: { guildId: message.guild.id }
            });

            if (args[0].toLowerCase() === 'disable') {
                await client.prisma.guildSettings.upsert({
                    where: { guildId: message.guild.id },
                    update: { muteRole: null },
                    create: { guildId: message.guild.id, muteRole: null }
                });

                const result = productionStyle.createSuccessEmbed(
                    'MUTE ROLE DISABLED',
                    { tag: 'Configuration Updated' },
                    message.author,
                    'H·ªá th·ªëng mute role ƒë√£ ƒë∆∞·ª£c t·∫Øt th√†nh c√¥ng.',
                    [
                        { name: 'Status', value: 'üî¥ Disabled', inline: true },
                        { name: 'Effect', value: 'Only Discord timeout will be used', inline: true },
                        { name: 'Setup Alternative', value: 'Use `!setup` to reconfigure', inline: true },
                        { name: 'Note', value: 'L·ªánh `!mute` s·∫Ω ch·ªâ s·ª≠ d·ª•ng Discord timeout' },
                        { name: 'Tip', value: 'S·ª≠ d·ª•ng `!setup` ƒë·ªÉ c·∫•u h√¨nh l·∫°i ho·∫∑c thi·∫øt l·∫≠p c√°c t√≠nh nƒÉng kh√°c' }
                    ]
                );
                return message.reply({ 
                    embeds: [result.embed], 
                    files: result.attachments 
                });
            }

            // Get target role
            const roleMention = message.mentions.roles.first();
            let targetRole = null;

            if (roleMention) {
                targetRole = roleMention;
            } else {
                const roleId = args[0].replace(/[<@&>]/g, '');
                try {
                    targetRole = await message.guild.roles.fetch(roleId);
                } catch (error) {
                    const result = productionStyle.createErrorEmbed(
                        'Role Not Found',
                        'Kh√¥ng t√¨m th·∫•y role v·ªõi ID ƒë∆∞·ª£c cung c·∫•p.',
                        'Use @role mention or valid role ID'
                    );
                    return message.reply({ 
                        embeds: [result.embed], 
                        files: result.attachments 
                    });
                }
            }

            if (!targetRole) {
                const result = productionStyle.createErrorEmbed(
                    'Invalid Role',
                    'Vui l√≤ng mention m·ªôt role h·ª£p l·ªá ho·∫∑c cung c·∫•p ID role.',
                    'Example: !setmuterole @Muted'
                );
                return message.reply({ 
                    embeds: [result.embed], 
                    files: result.attachments 
                });
            }

            // Check if bot can manage this role
            if (targetRole.position >= message.guild.members.me.roles.highest.position) {
                const result = productionStyle.createErrorEmbed(
                    'Role Hierarchy Error',
                    'Bot kh√¥ng th·ªÉ qu·∫£n l√Ω role n√†y.',
                    'Bot role must be higher than the mute role',
                    [
                        { name: 'Fix', value: 'Di chuy·ªÉn role c·ªßa bot l√™n cao h∆°n role mute' },
                        { name: 'Alternative', value: 'S·ª≠ d·ª•ng `!setup` ƒë·ªÉ t·ª± ƒë·ªông t·∫°o v√† c·∫•u h√¨nh role ph√π h·ª£p' }
                    ]
                );
                return message.reply({ 
                    embeds: [result.embed], 
                    files: result.attachments 
                });
            }

            // Check role permissions
            if (targetRole.permissions.has(['SendMessages', 'Speak'])) {
                const result = productionStyle.createWarningEmbed(
                    'Role Permission Warning',
                    'Role n√†y c√≥ quy·ªÅn g·ª≠i tin nh·∫Øn ho·∫∑c n√≥i voice. ƒêi·ªÅu n√†y c√≥ th·ªÉ l√†m mute kh√¥ng hi·ªáu qu·∫£.',
                    [
                        { name: 'Warning', value: 'T·∫°o role m·ªõi kh√¥ng c√≥ permissions ho·∫∑c ch·ªânh s·ª≠a role n√†y' },
                        { name: 'Auto-fix', value: 'S·ª≠ d·ª•ng `!setup` ƒë·ªÉ bot t·ª± ƒë·ªông t·∫°o role t·ªëi ∆∞u' }
                    ]
                );
                await message.reply({ 
                    embeds: [result.embed], 
                    files: result.attachments 
                });
            }

            // Update mute role
            await client.prisma.guildSettings.upsert({
                where: { guildId: message.guild.id },
                update: { muteRole: targetRole.id },
                create: { guildId: message.guild.id, muteRole: targetRole.id }
            });

            // Send success message
            const result = productionStyle.createSuccessEmbed(
                'MUTE ROLE CONFIGURED',
                { tag: 'Configuration Updated' },
                message.author,
                'Mute role ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p th√†nh c√¥ng!',
                [
                    { name: 'Mute Role', value: targetRole.toString(), inline: true },
                    { name: 'Position', value: `#${targetRole.position}`, inline: true },
                    { name: 'Members', value: `${targetRole.members.size} ng∆∞·ªùi`, inline: true },
                    { name: 'Color', value: targetRole.hexColor, inline: true },
                    { name: 'Permissions', value: targetRole.permissions.has(['SendMessages', 'Speak']) ? '‚ö†Ô∏è Has permissions' : '‚úÖ No send perms', inline: true },
                    { name: 'Status', value: 'üü¢ Active', inline: true },
                    { name: 'Usage', value: 'Role n√†y s·∫Ω ƒë∆∞·ª£c √°p d·ª•ng khi s·ª≠ d·ª•ng l·ªánh `!mute`' },
                    { name: 'Next Steps', value: '‚Ä¢ Test v·ªõi `!mute @user` ƒë·ªÉ ki·ªÉm tra\n‚Ä¢ S·ª≠ d·ª•ng `!setup` ƒë·ªÉ c·∫•u h√¨nh th√™m features kh√°c' }
                ]
            );

            await message.reply({ 
                embeds: [result.embed], 
                files: result.attachments 
            });

        } catch (error) {
            console.error('L·ªói khi thi·∫øt l·∫≠p mute role:', error);
            
            const result = productionStyle.createErrorEmbed(
                'Configuration Error',
                'ƒê√£ x·∫£y ra l·ªói khi thi·∫øt l·∫≠p mute role.',
                error.message
            );
            
            await message.reply({ 
                embeds: [result.embed], 
                files: result.attachments 
            });
        }
    }
}; 