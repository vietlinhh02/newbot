const { hasFlexiblePermission } = require('../../utils/permissions');
const productionStyle = require('../../utils/demoStyle');
const welcomeCard = require('../../utils/welcomeCard');

module.exports = {
    name: 'setwelcome',
    aliases: ['welcomeset', 'welcome'],
    description: 'C·∫•u h√¨nh h·ªá th·ªëng ch√†o m·ª´ng v·ªõi welcome card ƒë·∫πp',
    usage: '!setwelcome [subcommand] [options]',
    examples: [
        '!setwelcome #welcome Ch√†o m·ª´ng {user} ƒë·∫øn v·ªõi {server}!',
        '!setwelcome card enable',
        '!setwelcome bg https://example.com/image.jpg',
        '!setwelcome colors #ffffff #5865f2',
        '!setwelcome test'
    ],
    permissions: 'admin',
    guildOnly: true,
    category: 'config',
    
    async execute(message, args, client) {
        // Check permissions
        if (!await hasFlexiblePermission(message.member, 'setwelcome', this.permissions, message.guild.id)) {
            const result = productionStyle.createErrorEmbed(
                'Permission Denied',
                'B·∫°n c·∫ßn quy·ªÅn **Administrator** ƒë·ªÉ c·∫•u h√¨nh welcome!'
            );
            return message.reply({ 
                embeds: [result.embed], 
                files: result.attachments 
            });
        }
        
        // Show help if no args
        if (!args.length) {
            return this.showWelcomeHelp(message, client);
        }

        const subcommand = args[0].toLowerCase();
        
        try {
            switch (subcommand) {
                case 'card':
                    return await this.handleCardCommand(message, args.slice(1), client);
                    
                case 'bg':
                case 'background':
                    return await this.handleBackgroundCommand(message, args.slice(1), client);
                    
                case 'colors':
                case 'color':
                    return await this.handleColorsCommand(message, args.slice(1), client);
                    
                case 'disable':
                    return await this.handleDisable(message, client);
                    
                case 'test':
                    return await this.handleTest(message, client);
                    
                case 'status':
                    return await this.showStatus(message, client);
                    
                default:
                    // Handle setting channel and message (legacy format)
                    return await this.handleLegacySetup(message, args, client);
            }
            
        } catch (error) {
            console.error('L·ªói khi c·∫•u h√¨nh welcome:', error);
            
            const result = productionStyle.createErrorEmbed(
                'Configuration Error',
                'ƒê√£ x·∫£y ra l·ªói khi c·∫•u h√¨nh welcome system.',
                error.message
            );
            
            await message.reply({ 
                embeds: [result.embed], 
                files: result.attachments 
            });
        }
    },

    async showWelcomeHelp(message, client) {
        const guildSettings = await client.prisma.guildSettings.findUnique({
            where: { guildId: message.guild.id }
        });
        
        const currentChannel = guildSettings?.welcomeChannel ? 
            `<#${guildSettings.welcomeChannel}>` : 'Ch∆∞a c·∫•u h√¨nh';
        const cardEnabled = guildSettings?.welcomeCardEnabled || false;
        
        const result = productionStyle.createInfoEmbed(
            'WELCOME CARD SYSTEM',
            { tag: 'Configuration Guide' },
            message.author,
            'H·ªá th·ªëng ch√†o m·ª´ng v·ªõi welcome card ƒë·∫πp v√† background t√πy ch·ªânh!',
            [
                {
                    name: 'Current Status',
                    value: `üì∫ **Channel:** ${currentChannel}\nüñºÔ∏è **Welcome Card:** ${cardEnabled ? '‚úÖ Enabled' : '‚ùå Disabled'}`,
                    inline: false
                },
                {
                    name: 'Welcome Card Commands',
                    value: [
                        '‚Ä¢ `!setwelcome card enable/disable` - B·∫≠t/t·∫Øt welcome card',
                        '‚Ä¢ `!setwelcome bg <image_url>` - Set background image',
                        '‚Ä¢ `!setwelcome colors <text> <accent>` - Set m√†u text v√† accent',
                        '‚Ä¢ `!setwelcome test` - Test welcome card'
                    ].join('\n'),
                    inline: false
                },
                {
                    name: 'Basic Commands',
                    value: [
                        '‚Ä¢ `!setwelcome #channel message` - Setup c∆° b·∫£n',
                        '‚Ä¢ `!setwelcome status` - Xem c·∫•u h√¨nh hi·ªán t·∫°i',
                        '‚Ä¢ `!setwelcome disable` - T·∫Øt h·ªá th·ªëng'
                    ].join('\n'),
                    inline: false
                },
                {
                    name: 'Variables',
                    value: '`{user}`, `{mention}`, `{server}`, `{membercount}`',
                    inline: true
                },
                {
                    name: 'Quick Setup',
                    value: 'D√πng `!setup` ƒë·ªÉ c·∫•u h√¨nh nhanh t·∫•t c·∫£ t√≠nh nƒÉng',
                    inline: true
                }
            ]
        );
        
        await message.reply({ 
            embeds: [result.embed], 
            files: result.attachments 
        });
    },

    async handleCardCommand(message, args, client) {
        if (!args[0]) {
            const result = productionStyle.createWarningEmbed(
                'Missing Parameter',
                'Vui l√≤ng ch·ªçn `enable` ho·∫∑c `disable`',
                [
                    { name: 'Example', value: '`!setwelcome card enable`' },
                    { name: 'Options', value: 'enable, disable, on, off' }
                ]
            );
            return message.reply({ 
                embeds: [result.embed], 
                files: result.attachments 
            });
        }

        const action = args[0].toLowerCase();
        const enabled = action === 'enable' || action === 'on' || action === 'true';
        
        if (!['enable', 'disable', 'on', 'off', 'true', 'false'].includes(action)) {
            const result = productionStyle.createErrorEmbed(
                'Invalid Parameter',
                'Ch·ªâ ch·∫•p nh·∫≠n `enable` ho·∫∑c `disable`',
                'Valid options: enable, disable, on, off'
            );
            return message.reply({ 
                embeds: [result.embed], 
                files: result.attachments 
            });
        }

        await client.prisma.guildSettings.upsert({
            where: { guildId: message.guild.id },
            update: { welcomeCardEnabled: enabled },
            create: { guildId: message.guild.id, welcomeCardEnabled: enabled }
        });

        const result = productionStyle.createSuccessEmbed(
            `WELCOME CARD ${enabled ? 'ENABLED' : 'DISABLED'}`,
            { tag: 'Configuration Updated' },
            message.author,
            `H·ªá th·ªëng welcome card ƒë√£ ƒë∆∞·ª£c ${enabled ? 'k√≠ch ho·∫°t' : 't·∫Øt'}.`,
            [
                { 
                    name: 'Status', 
                    value: enabled ? 'üü¢ Enabled' : 'üî¥ Disabled', 
                    inline: true 
                },
                { 
                    name: 'Next Steps', 
                    value: enabled 
                        ? '‚Ä¢ Thi·∫øt l·∫≠p background: `!setwelcome bg <url>`\n‚Ä¢ Test card: `!setwelcome test`'
                        : '‚Ä¢ B·∫≠t l·∫°i: `!setwelcome card enable`', 
                    inline: false 
                }
            ]
        );
        
        await message.reply({ 
            embeds: [result.embed], 
            files: result.attachments 
        });
    },

    async handleBackgroundCommand(message, args, client) {
        const imageUrl = args[0];
        
        if (!imageUrl) {
            const result = productionStyle.createWarningEmbed(
                'Missing Image URL',
                'Vui l√≤ng cung c·∫•p URL c·ªßa h√¨nh ·∫£nh background.',
                [
                    { name: 'Example', value: '`!setwelcome bg https://example.com/image.jpg`' },
                    { name: 'Supported Formats', value: 'JPG, PNG, GIF, WEBP' },
                    { name: 'Recommended Size', value: '800x400px' }
                ]
            );
            return message.reply({ 
                embeds: [result.embed], 
                files: result.attachments 
            });
        }

        // Validate URL format
        try {
            new URL(imageUrl);
        } catch (error) {
            const result = productionStyle.createErrorEmbed(
                'Invalid URL',
                'Vui l√≤ng cung c·∫•p URL h√¨nh ·∫£nh h·ª£p l·ªá.',
                'Must be a valid HTTP/HTTPS URL'
            );
            return message.reply({ 
                embeds: [result.embed], 
                files: result.attachments 
            });
        }

        // Test if image can be loaded
        try {
            const testCard = await welcomeCard.createWelcomeCard(message.author, message.guild, {
                backgroundUrl: imageUrl,
                welcomeText: 'Test Background',
                subtitle: 'Ki·ªÉm tra background image'
            });
            
            if (!testCard) {
                const result = productionStyle.createErrorEmbed(
                    'Image Load Failed',
                    'URL h√¨nh ·∫£nh kh√¥ng th·ªÉ truy c·∫≠p ho·∫∑c ƒë·ªãnh d·∫°ng kh√¥ng h·ªó tr·ª£.',
                    'Check URL and image format'
                );
                return message.reply({ 
                    embeds: [result.embed], 
                    files: result.attachments 
                });
            }
            
            // Save to database
            await client.prisma.guildSettings.upsert({
                where: { guildId: message.guild.id },
                update: { 
                    welcomeBackgroundUrl: imageUrl,
                    welcomeCardEnabled: true // Auto-enable card when setting background
                },
                create: {
                    guildId: message.guild.id,
                    welcomeBackgroundUrl: imageUrl,
                    welcomeCardEnabled: true
                }
            });

            const result = productionStyle.createSuccessEmbed(
                'BACKGROUND CONFIGURED',
                { tag: 'Welcome Card Updated' },
                message.author,
                'Background image cho welcome card ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t.',
                [
                    { name: 'Background URL', value: `[Link](${imageUrl})`, inline: false },
                    { name: 'Welcome Card', value: 'üü¢ Auto-enabled', inline: true },
                    { name: 'Test', value: 'Use `!setwelcome test` to preview', inline: true }
                ]
            );

            await message.reply({ 
                embeds: [result.embed], 
                files: [testCard, ...result.attachments] 
            });
            
        } catch (error) {
            console.error('Error testing background image:', error);
            const result = productionStyle.createErrorEmbed(
                'Background Test Failed',
                'Kh√¥ng th·ªÉ t·∫£i ho·∫∑c x·ª≠ l√Ω h√¨nh ·∫£nh background.',
                error.message
            );
            await message.reply({ 
                embeds: [result.embed], 
                files: result.attachments 
            });
        }
    },

    async handleColorsCommand(message, args, client) {
        if (args.length < 2) {
            const result = productionStyle.createWarningEmbed(
                'Missing Color Parameters',
                'Vui l√≤ng cung c·∫•p 2 m√†u: text color v√† accent color.',
                [
                    { name: 'Example', value: '`!setwelcome colors #ffffff #5865f2`' },
                    { name: 'Format', value: 'Hex color codes (e.g., #ffffff, #ff0000)' },
                    { name: 'Usage', value: 'First color: text, Second color: accent' }
                ]
            );
            return message.reply({ 
                embeds: [result.embed], 
                files: result.attachments 
            });
        }

        const textColor = args[0];
        const accentColor = args[1];

        // Validate hex color format
        const hexColorRegex = /^#([0-9A-F]{3}){1,2}$/i;
        
        if (!hexColorRegex.test(textColor) || !hexColorRegex.test(accentColor)) {
            const result = productionStyle.createErrorEmbed(
                'Invalid Color Format',
                'Vui l√≤ng s·ª≠ d·ª•ng ƒë·ªãnh d·∫°ng hex color (e.g., #ffffff)',
                'Both colors must be valid hex codes'
            );
            return message.reply({ 
                embeds: [result.embed], 
                files: result.attachments 
            });
        }
            
        await client.prisma.guildSettings.upsert({
            where: { guildId: message.guild.id },
            update: { 
                welcomeTextColor: textColor,
                welcomeAccentColor: accentColor
            },
            create: { 
                guildId: message.guild.id,
                welcomeTextColor: textColor,
                welcomeAccentColor: accentColor
            }
        });

        const result = productionStyle.createSuccessEmbed(
            'COLORS UPDATED',
            { tag: 'Welcome Card Customized' },
            message.author,
            'M√†u s·∫Øc cho welcome card ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p.',
            [
                { name: 'Text Color', value: `\`${textColor}\``, inline: true },
                { name: 'Accent Color', value: `\`${accentColor}\``, inline: true },
                { name: 'Preview', value: 'Use `!setwelcome test` to see changes', inline: false }
            ]
        );

        await message.reply({ 
            embeds: [result.embed], 
            files: result.attachments 
        });
    },

    async handleDisable(message, client) {
        await client.prisma.guildSettings.upsert({
            where: { guildId: message.guild.id },
            update: { 
                welcomeChannel: null,
                welcomeMessage: null,
                welcomeCardEnabled: false,
                welcomeBackgroundUrl: null,
                welcomeTextColor: null,
                welcomeAccentColor: null
            },
            create: { guildId: message.guild.id }
        });
        
        const result = productionStyle.createSuccessEmbed(
            'WELCOME SYSTEM DISABLED',
            { tag: 'Configuration Updated' },
            message.author,
            'To√†n b·ªô h·ªá th·ªëng ch√†o m·ª´ng ƒë√£ ƒë∆∞·ª£c t·∫Øt.',
            [
                { name: 'Status', value: 'üî¥ All welcome features disabled', inline: true },
                { name: 'Reset', value: 'All settings cleared', inline: true },
                { name: 'Re-enable', value: 'Use `!setwelcome` or `!setup` to configure again', inline: false }
            ]
        );
        
        await message.reply({ 
            embeds: [result.embed], 
            files: result.attachments 
        });
    },

    async handleTest(message, client) {
        const guildSettings = await client.prisma.guildSettings.findUnique({
            where: { guildId: message.guild.id }
        });

        if (!guildSettings?.welcomeChannel) {
            const result = productionStyle.createWarningEmbed(
                'No Welcome Configuration',
                'Vui l√≤ng thi·∫øt l·∫≠p k√™nh welcome tr∆∞·ªõc khi test.',
                [
                    { name: 'Setup Required', value: 'Channel must be configured first' },
                    { name: 'Basic Setup', value: '`!setwelcome #channel message`' },
                    { name: 'Advanced Setup', value: '`!setup` for full configuration' }
                ]
            );
            return message.reply({ 
                embeds: [result.embed], 
                files: result.attachments 
            });
        }
                
        const testChannel = message.guild.channels.cache.get(guildSettings.welcomeChannel);
        if (!testChannel) {
            const result = productionStyle.createErrorEmbed(
                'Welcome Channel Not Found',
                'K√™nh welcome ƒë√£ b·ªã x√≥a.',
                'Channel was deleted or is inaccessible',
                [
                    { name: 'Fix', value: 'Reconfigure with `!setwelcome #channel message`' }
                ]
            );
            return message.reply({ 
                embeds: [result.embed], 
                files: result.attachments 
            });
        }
                
        try {
            if (guildSettings.welcomeCardEnabled) {
                // Create welcome card
                const card = await welcomeCard.createWelcomeCard(message.author, message.guild, {
                    backgroundUrl: guildSettings.welcomeBackgroundUrl,
                    welcomeText: welcomeCard.formatText(guildSettings.welcomeMessage || 'Welcome to {server}!', message.author, message.guild),
                    subtitle: `You are member #${message.guild.memberCount}`,
                    textColor: guildSettings.welcomeTextColor || '#ffffff',
                    accentColor: guildSettings.welcomeAccentColor || '#5865f2'
                });

                if (card) {
                    await testChannel.send({
                        content: `üß™ **Welcome Card Test** - ${message.author}`,
                        files: [card]
                    });
                } else {
                    throw new Error('Failed to create welcome card');
                }
            } else {
                // Send regular text message
                const testMessage = formatWelcomeMessage(guildSettings.welcomeMessage || 'Welcome {mention} to {server}!', message.author, message.guild);
                
                const testResult = productionStyle.createInfoEmbed(
                    'WELCOME TEST MESSAGE',
                    { tag: 'Test Message' },
                    message.author,
                    testMessage,
                    [
                        { name: 'Test User', value: message.author.tag, inline: true },
                        { name: 'Test Time', value: `<t:${Math.floor(Date.now() / 1000)}:F>`, inline: true }
                    ]
                );
                
                await testChannel.send({ 
                    embeds: [testResult.embed], 
                    files: testResult.attachments 
                });
            }
            
            const result = productionStyle.createSuccessEmbed(
                'WELCOME TEST SUCCESSFUL',
                { tag: 'Test Completed' },
                message.author,
                `Welcome ${guildSettings.welcomeCardEnabled ? 'card' : 'message'} ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng!`,
                [
                    { name: 'Test Channel', value: testChannel.toString(), inline: true },
                    { name: 'Type', value: guildSettings.welcomeCardEnabled ? 'Welcome Card' : 'Text Message', inline: true },
                    { name: 'Status', value: '‚úÖ Test completed', inline: true }
                ]
            );
            await message.reply({ 
                embeds: [result.embed], 
                files: result.attachments 
            });
            
        } catch (error) {
            console.error('Test welcome error:', error);
            const result = productionStyle.createErrorEmbed(
                'Welcome Test Failed',
                `Kh√¥ng th·ªÉ g·ª≠i test message ƒë·∫øn ${testChannel}`,
                error.message
            );
            await message.reply({ 
                embeds: [result.embed], 
                files: result.attachments 
            });
        }
    },

    async showStatus(message, client) {
        const guildSettings = await client.prisma.guildSettings.findUnique({
            where: { guildId: message.guild.id }
        });

        const result = productionStyle.createInfoEmbed(
            'WELCOME SYSTEM STATUS',
            { tag: 'Current Configuration' },
            message.author,
            'Tr·∫°ng th√°i hi·ªán t·∫°i c·ªßa h·ªá th·ªëng welcome',
            [
                {
                    name: 'Welcome Channel',
                    value: guildSettings?.welcomeChannel ? `<#${guildSettings.welcomeChannel}>` : 'Ch∆∞a c·∫•u h√¨nh',
                    inline: true
                },
                {
                    name: 'Welcome Card',
                    value: guildSettings?.welcomeCardEnabled ? '‚úÖ Enabled' : '‚ùå Disabled',
                    inline: true
                },
                {
                    name: 'Background',
                    value: guildSettings?.welcomeBackgroundUrl ? '[Custom set](' + guildSettings.welcomeBackgroundUrl + ')' : 'Default',
                    inline: true
                },
                {
                    name: 'Welcome Message',
                    value: guildSettings?.welcomeMessage ? `\`\`\`${guildSettings.welcomeMessage.length > 100 ? guildSettings.welcomeMessage.substring(0, 100) + '...' : guildSettings.welcomeMessage}\`\`\`` : 'Not configured',
                    inline: false
                },
                {
                    name: 'Colors',
                    value: `**Text:** \`${guildSettings?.welcomeTextColor || '#ffffff'}\`\n**Accent:** \`${guildSettings?.welcomeAccentColor || '#5865f2'}\``,
                    inline: false
                }
            ]
        );

        await message.reply({ 
            embeds: [result.embed], 
            files: result.attachments 
        });
    },

    async handleLegacySetup(message, args, client) {
        // Handle old format: !setwelcome #channel message
        if (!args[1]) {
            const result = productionStyle.createWarningEmbed(
                'Missing Information',
                'Vui l√≤ng cung c·∫•p c·∫£ k√™nh v√† tin nh·∫Øn welcome.',
                [
                    { name: 'Usage', value: '`!setwelcome #channel message`' },
                    { name: 'Example', value: '`!setwelcome #welcome Ch√†o m·ª´ng {user} ƒë·∫øn v·ªõi {server}!`' },
                    { name: 'Variables', value: '`{user}`, `{mention}`, `{server}`, `{membercount}`' }
                ]
            );
            return message.reply({ 
                embeds: [result.embed], 
                files: result.attachments 
            });
        }
            
        // Parse channel
        let welcomeChannel = null;
        const channelMention = message.mentions.channels.first();
        
        if (channelMention) {
            welcomeChannel = channelMention;
        } else {
            const channelId = args[0].replace(/[<#>]/g, '');
            try {
                welcomeChannel = await message.guild.channels.fetch(channelId);
            } catch (error) {
                const result = productionStyle.createErrorEmbed(
                    'Channel Not Found',
                    'Kh√¥ng t√¨m th·∫•y k√™nh ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh!',
                    'Use #channel mention or valid channel ID'
                );
                return message.reply({ 
                    embeds: [result.embed], 
                    files: result.attachments 
                });
            }
        }
        
        if (!welcomeChannel) {
            const result = productionStyle.createErrorEmbed(
                'Invalid Channel',
                'Kh√¥ng t√¨m th·∫•y k√™nh welcome!',
                'Please mention a valid channel'
            );
            return message.reply({ 
                embeds: [result.embed], 
                files: result.attachments 
            });
        }
            
        // Validate channel
        if (!welcomeChannel.isTextBased()) {
            const result = productionStyle.createErrorEmbed(
                'Invalid Channel Type',
                'Ch·ªâ c√≥ th·ªÉ s·ª≠ d·ª•ng text channel l√†m k√™nh welcome.',
                'Select a text channel instead'
            );
            return message.reply({ 
                embeds: [result.embed], 
                files: result.attachments 
            });
        }
            
        // Check bot permissions
        const botPermissions = welcomeChannel.permissionsFor(message.guild.members.me);
        if (!botPermissions.has(['ViewChannel', 'SendMessages', 'EmbedLinks', 'AttachFiles'])) {
            const result = productionStyle.createErrorEmbed(
                'Bot Missing Channel Permissions',
                `Bot c·∫ßn quy·ªÅn **View Channel**, **Send Messages**, **Embed Links** v√† **Attach Files** trong ${welcomeChannel}`,
                'Grant the required permissions'
            );
            return message.reply({ 
                embeds: [result.embed], 
                files: result.attachments 
            });
        }
            
        // Get welcome message
        const welcomeMessage = args.slice(1).join(' ');
        
        if (welcomeMessage.length > 1000) {
            const result = productionStyle.createErrorEmbed(
                'Message Too Long',
                'Welcome message kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 1000 k√Ω t·ª±.',
                `Current: ${welcomeMessage.length}/1000 characters`
            );
            return message.reply({ 
                embeds: [result.embed], 
                files: result.attachments 
            });
        }
            
        // Save to database
        await client.prisma.guildSettings.upsert({
            where: { guildId: message.guild.id },
            update: { 
                welcomeChannel: welcomeChannel.id,
                welcomeMessage: welcomeMessage
            },
            create: {
                guildId: message.guild.id,
                welcomeChannel: welcomeChannel.id,
                welcomeMessage: welcomeMessage
            }
        });
        
        const result = productionStyle.createSuccessEmbed(
            'WELCOME SYSTEM CONFIGURED',
            { tag: 'Configuration Updated' },
            message.author,
            'Welcome system ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh th√†nh c√¥ng!',
            [
                { name: 'Welcome Channel', value: welcomeChannel.toString(), inline: true },
                { name: 'Message Length', value: `${welcomeMessage.length}/1000`, inline: true },
                { name: 'Status', value: 'üü¢ Active', inline: true },
                { name: 'Welcome Message', value: welcomeMessage.length > 200 ? welcomeMessage.substring(0, 200) + '...' : welcomeMessage },
                { name: 'Advanced Features', value: '‚Ä¢ Enable welcome cards: `!setwelcome card enable`\n‚Ä¢ Test configuration: `!setwelcome test`\n‚Ä¢ Full setup wizard: `!setup`' }
            ]
        );
        
        await message.reply({ 
            embeds: [result.embed], 
            files: result.attachments 
        });
    }
};

// Helper function to format welcome message
function formatWelcomeMessage(template, user, guild) {
    return template
        .replace(/{user}/g, user.username)
        .replace(/{mention}/g, `<@${user.id}>`)
        .replace(/{server}/g, guild.name)
        .replace(/{membercount}/g, guild.memberCount.toLocaleString());
} 