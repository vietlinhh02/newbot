const { FARM_MATERIALS, MEDICINES, SPIRIT_STONES, SHOP_ITEMS, CRAFT_RECIPES, FUSION_RECIPES, getItemStorageInfo } = require('../../utils/cultivationData');
const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, ComponentType } = require('discord.js');

module.exports = {
    name: 'craft',
    aliases: ['ghep', 'alchemy'],
    description: 'Gh√©p nguy√™n li·ªáu th√†nh thu·ªëc/ƒëan d∆∞·ª£c ho·∫∑c dung h·ª£p v·∫≠t ph·∫©m c·∫•p cao',
    usage: '!craft <item> [type]',
    examples: [
        '!craft z1 - Craft thu·ªëc c·∫•p 1',
        '!craft d1 - Craft ƒëan d∆∞·ª£c h·∫° ph·∫©m',
        '!craft z2 fusion - Fusion thu·ªëc c·∫•p 2',
        '!craft lt2 fusion - Fusion linh th·∫°ch',
        '!craft recipes - xem c√¥ng th·ª©c'
    ],
    permissions: 'everyone',
    guildOnly: true,
    category: 'cultivation',

    async execute(message, args, client) {
        try {
            const userId = message.author.id;
            const guildId = message.guild.id;

            if (!args[0] || args[0] === 'recipes' || args[0] === 'recipe') {
                return this.showRecipes(message, client);
            }

            const targetItem = args[0].toLowerCase();
            const craftType = args[1]?.toLowerCase() || 'craft'; // 'craft' ho·∫∑c 'fusion'

            // Validate item - check both MEDICINES and SPIRIT_STONES
            const itemData = MEDICINES[targetItem] || SPIRIT_STONES[targetItem];
            if (!itemData) {
                return message.reply(`‚ùå Kh√¥ng t√¨m th·∫•y item "${targetItem}"! S·ª≠ d·ª•ng \`!craft recipes\` ƒë·ªÉ xem c√¥ng th·ª©c.`);
            }

            // Get user data
            const cultivationUser = await client.prisma.cultivationUser.findUnique({
                where: {
                    userId: userId
                }
            });

            if (!cultivationUser) {
                return message.reply(`‚ùå **${message.author.username}** ch∆∞a b·∫Øt ƒë·∫ßu tu luy·ªán! G·ª≠i tin nh·∫Øn trong server ƒë·ªÉ b·∫Øt ƒë·∫ßu nh·∫≠n EXP.`);
            }

            // Get user inventory
            const inventory = await client.prisma.userInventory.findMany({
                where: {
                    userId: userId
                }
            });

            // Convert to easy lookup using storage info
            const userItems = {};
            inventory.forEach(item => {
                // Standard lookup key
                const key = `${item.itemType}_${item.itemId}`;
                userItems[key] = item.quantity;
                
                // Handle spirit stones - store both ways for compatibility
                if (item.itemId.startsWith('spirit_')) {
                    const actualId = item.itemId.replace('spirit_', '');
                    userItems[`spirit_${actualId}`] = item.quantity;
                }
                
                // Also create reverse lookup for farmable medicines
                if (item.itemType === 'medicine') {
                    userItems[`medicine_${item.itemId}`] = item.quantity;
                }
                
                // Create lookup for numbered materials
                if (item.itemType === 'material' && !item.itemId.startsWith('spirit_')) {
                    userItems[`material_${item.itemId}`] = item.quantity;
                }
            });

            // Check craft type and recipe
            let recipe;
            let successRate;
            let requiredItems = [];

            if (craftType === 'fusion') {
                recipe = FUSION_RECIPES[targetItem];
                if (!recipe) {
                    return message.reply(`‚ùå Kh√¥ng th·ªÉ fusion item "${targetItem}"!`);
                }

                successRate = recipe.successRate;
                for (const [itemId, quantity] of Object.entries(recipe.required)) {
                    let itemType, itemName, haveQty;
                    
                    // Check if this is a spirit stone
                    if (SPIRIT_STONES[itemId]) {
                        itemType = 'spirit';
                        itemName = SPIRIT_STONES[itemId].name;
                        haveQty = userItems[`spirit_${itemId}`] || 0;
                    } else {
                        itemType = 'medicine';
                        itemName = MEDICINES[itemId]?.name || itemId;
                        haveQty = userItems[`medicine_${itemId}`] || 0;
                    }
                    
                    requiredItems.push({
                        type: itemType,
                        id: itemId,
                        needed: quantity,
                        have: haveQty,
                        name: itemName
                    });
                }
            } else {
                recipe = CRAFT_RECIPES[targetItem];
                if (!recipe) {
                    return message.reply(`‚ùå Kh√¥ng th·ªÉ craft item "${targetItem}"!`);
                }

                successRate = recipe.successRate;

                // Add materials
                if (recipe.materials) {
                    for (const [itemId, quantity] of Object.entries(recipe.materials)) {
                        const storageInfo = getItemStorageInfo(itemId);
                        const key = `${storageInfo.category}_${storageInfo.actualId}`;
                        requiredItems.push({
                            type: storageInfo.category,
                            id: itemId,
                            actualId: storageInfo.actualId,
                            needed: quantity,
                            have: userItems[key] || 0,
                            name: storageInfo.name
                        });
                    }
                }

                // Add medicines
                if (recipe.medicines) {
                    for (const [itemId, quantity] of Object.entries(recipe.medicines)) {
                        const storageInfo = getItemStorageInfo(itemId);
                        const key = `${storageInfo.category}_${storageInfo.actualId}`;
                        requiredItems.push({
                            type: storageInfo.category,
                            id: itemId,
                            actualId: storageInfo.actualId,
                            needed: quantity,
                            have: userItems[key] || 0,
                            name: storageInfo.name
                        });
                    }
                }
            }

            // Check if user has enough materials
            const missingItems = requiredItems.filter(item => item.have < item.needed);

            if (missingItems.length > 0) {
                const missingText = missingItems.map(item => {
                    const storageInfo = getItemStorageInfo(item.id);
                    return `${storageInfo.icon} **${item.name}**: C·∫ßn \`${item.needed}\`, c√≥ \`${item.have}\``;
                }).join('\n');

                const errorEmbed = new EmbedBuilder()
                    .setTitle('‚ùå Kh√¥ng ƒë·ªß nguy√™n li·ªáu!')
                    .setDescription(`Kh√¥ng th·ªÉ ${craftType === 'fusion' ? 'dung h·ª£p' : 'ch·∫ø t·∫°o'} **${itemData.name}**`)
                    .setColor(0xffa500)
                    .addFields({
                        name: 'üì¶ Nguy√™n li·ªáu thi·∫øu',
                        value: missingText,
                        inline: false
                    })
                    .setTimestamp()
                    .setFooter({ 
                        text: message.author.username, 
                        iconURL: message.author.displayAvatarURL() 
                    });

                return message.reply({ embeds: [errorEmbed] });
            }

            // Perform crafting
            const success = Math.random() * 100 < successRate;

            // Remove materials regardless of success/failure
            for (const item of requiredItems) {
                let actualType = item.type;
                let actualId = item.actualId || item.id;
                
                // Handle spirit stones (for fusion compatibility)
                if (item.type === 'spirit') {
                    actualType = 'material';
                    actualId = `spirit_${item.id}`;
                }
                
                await client.prisma.userInventory.update({
                    where: {
                        userId_itemType_itemId: {
                            userId: userId,
                            itemType: actualType,
                            itemId: actualId
                        }
                    },
                    data: {
                        quantity: {
                            decrement: item.needed
                        }
                    }
                });
            }

            // If successful, add the crafted item
            if (success) {
                const resultStorageInfo = getItemStorageInfo(targetItem);
                
                await client.prisma.userInventory.upsert({
                    where: {
                        userId_itemType_itemId: {
                            userId: userId,
                            itemType: resultStorageInfo.category,
                            itemId: resultStorageInfo.actualId
                        }
                    },
                    update: {
                        quantity: {
                            increment: 1
                        }
                    },
                    create: {
                        userId: userId,
                        itemType: resultStorageInfo.category,
                        itemId: resultStorageInfo.actualId,
                        quantity: 1
                    }
                });
            }

            // Show result v·ªõi embed
            const resultEmbed = new EmbedBuilder()
                .setTimestamp()
                .setFooter({ 
                    text: message.author.username, 
                    iconURL: message.author.displayAvatarURL() 
                });

            if (success) {
                resultEmbed
                    .setTitle('üß™ Ch·∫ø t·∫°o th√†nh c√¥ng!')
                    .setDescription(`${itemData.icon} **${itemData.name}** ƒë√£ ƒë∆∞·ª£c t·∫°o ra!`)
                    .setColor(0x00ff00)
                    .addFields({
                        name: 'üìä Th√¥ng tin',
                        value: `‚Ä¢ **Lo·∫°i:** ${craftType === 'fusion' ? 'Dung h·ª£p' : 'Gh√©p li·ªáu'}\n‚Ä¢ **T·ªâ l·ªá th√†nh c√¥ng:** \`${successRate}%\``,
                        inline: false
                    });
            } else {
                resultEmbed
                    .setTitle('üí• Ch·∫ø t·∫°o th·∫•t b·∫°i!')
                    .setDescription(`Kh√¥ng th·ªÉ t·∫°o ra **${itemData.name}**. Nguy√™n li·ªáu ƒë√£ b·ªã ti√™u hao.`)
                    .setColor(0xff0000)
                    .addFields({
                        name: 'üìä Th√¥ng tin',
                        value: `‚Ä¢ **Lo·∫°i:** ${craftType === 'fusion' ? 'Dung h·ª£p' : 'Gh√©p li·ªáu'}\n‚Ä¢ **T·ªâ l·ªá th√†nh c√¥ng:** \`${successRate}%\`\n‚Ä¢ **L·∫ßn sau c√≥ th·ªÉ th√†nh c√¥ng h∆°n!**`,
                        inline: false
                    });
            }

            await message.reply({ embeds: [resultEmbed] });

        } catch (error) {
            console.error('Error in craft command:', error);
            await message.reply(`‚ùå L·ªói craft: ${error.message}`);
        }
    },

    async showRecipes(message, client) {
        // T·∫°o c√°c trang v·ªõi th√¥ng tin chi ti·∫øt
        const pages = [];
        
        // Page 1: T·ªïng quan
        const overviewEmbed = new EmbedBuilder()
            .setTitle('üß™ Alchemy Recipes - Tu Ti√™n')
            .setDescription('**H·ªá th·ªëng ch·∫ø t·∫°o v√† dung h·ª£p v·∫≠t ph·∫©m tu ti√™n**')
            .setColor(0x9932cc)
            .setTimestamp()
            .setFooter({ 
                text: `Trang 1/5 ‚Ä¢ Y√™u c·∫ßu b·ªüi ${message.author.username}`, 
                iconURL: message.author.displayAvatarURL() 
            })
            .addFields([
                {
                    name: 'üî® CRAFT (Gh√©p nguy√™n li·ªáu)',
                    value: `**${Object.keys(CRAFT_RECIPES).length} c√¥ng th·ª©c craft:**\n` +
                           '‚Ä¢ **ƒêan d∆∞·ª£c:** d1, d2, d3, d4 (t·ª´ nguy√™n li·ªáu + ƒëan ph∆∞∆°ng + ƒëan l√≤)\n' +
                           '‚Ä¢ **Linh th·∫°ch:** lt2, lt3, lt4 (t·ª´ linh th·∫°ch th·∫•p h∆°n + t·ª• linh th·∫°ch)\n' +
                           '‚Ä¢ **T·ªâ l·ªá th√†nh c√¥ng:** 50%',
                    inline: false
                },
                {
                    name: '‚öóÔ∏è FUSION (Dung h·ª£p)',
                    value: `**${Object.keys(FUSION_RECIPES).length} c√¥ng th·ª©c fusion:**\n` +
                           '‚Ä¢ **ƒêan d∆∞·ª£c:** d2, d3, d4 (t·ª´ ƒëan d∆∞·ª£c th·∫•p h∆°n + ƒëan l√≤)\n' +
                           '‚Ä¢ **ƒêan ph∆∞∆°ng:** dp2, dp3, dp4 (t·ª´ ƒëan ph∆∞∆°ng th·∫•p h∆°n + pdp)\n' +
                           '‚Ä¢ **T·ªâ l·ªá th√†nh c√¥ng:** 50%',
                    inline: false
                },
                {
                    name: 'üí° C√°ch s·ª≠ d·ª•ng',
                    value: '‚Ä¢ `!craft <item>` - Gh√©p nguy√™n li·ªáu (50% th√†nh c√¥ng)\n' +
                           '‚Ä¢ `!craft <item> fusion` - Dung h·ª£p v·∫≠t ph·∫©m (50% th√†nh c√¥ng)\n' +
                           '‚Ä¢ `!craft recipes` - Xem t·∫•t c·∫£ c√¥ng th·ª©c\n' +
                           '‚Ä¢ `!farm` - Thu th·∫≠p nguy√™n li·ªáu c∆° b·∫£n\n' +
                           '‚Ä¢ `!shop` - Mua ƒëan ph∆∞∆°ng, ƒëan l√≤, t·ª• linh th·∫°ch',
                    inline: false
                },
                {
                    name: 'üìñ Navigation',
                    value: '‚Ä¢ **Trang 1:** T·ªïng quan h·ªá th·ªëng\n' +
                           '‚Ä¢ **Trang 2:** CRAFT - ƒêan d∆∞·ª£c (d1-d4) v√† Linh th·∫°ch (lt2-lt4)\n' +
                           '‚Ä¢ **Trang 3:** FUSION - ƒêan d∆∞·ª£c (d2-d4)\n' +
                           '‚Ä¢ **Trang 4:** FUSION - ƒêan ph∆∞∆°ng (dp2-dp4)\n' +
                           '‚Ä¢ **Trang 5:** Nguy√™n li·ªáu & H∆∞·ªõng d·∫´n\n\n' +
                           'üéÆ **D√πng n√∫t b√™n d∆∞·ªõi ƒë·ªÉ chuy·ªÉn trang!**',
                    inline: false
                }
            ]);
        pages.push(overviewEmbed);

        // Page 2: CRAFT - ƒêan d∆∞·ª£c v√† Linh th·∫°ch
        const craftPillsEmbed = new EmbedBuilder()
            .setTitle('üî® CRAFT - ƒêan d∆∞·ª£c & Linh th·∫°ch')
            .setDescription('**Ch·∫ø t·∫°o ƒëan d∆∞·ª£c t·ª´ nguy√™n li·ªáu + ƒëan ph∆∞∆°ng + ƒëan l√≤ v√† linh th·∫°ch t·ª´ linh th·∫°ch th·∫•p h∆°n + t·ª• linh th·∫°ch**')
            .setColor(0x0080ff)
            .setTimestamp()
            .setFooter({ 
                text: `Trang 2/5 ‚Ä¢ Y√™u c·∫ßu b·ªüi ${message.author.username}`, 
                iconURL: message.author.displayAvatarURL() 
            });

        // Filter craft recipes for pills (d series) and spirit stones (lt series)
        const craftRecipes = Object.entries(CRAFT_RECIPES).filter(([itemId]) => 
            itemId.startsWith('d') || itemId.startsWith('lt')
        );
        craftRecipes.forEach(([itemId, recipe]) => {
            const itemData = MEDICINES[itemId] || SPIRIT_STONES[itemId];
            
            if (itemData) {
                let ingredients = '';
                if (recipe.materials) {
                    const materials = Object.entries(recipe.materials).map(([id, qty]) => {
                        const materialData = FARM_MATERIALS[id] || SPIRIT_STONES[id] || SHOP_ITEMS[id];
                        return `${materialData?.icon} \`${qty}\``;
                    }).join(' + ');
                    ingredients += materials;
                }
                if (recipe.medicines && Object.keys(recipe.medicines).length > 0) {
                    if (ingredients) ingredients += ' + ';
                    const medicines = Object.entries(recipe.medicines).map(([id, qty]) => {
                        const itemData = MEDICINES[id] || SHOP_ITEMS[id];
                        return `${itemData?.icon} \`${qty}\``;
                    }).join(' + ');
                    ingredients += medicines;
                }

                const description = itemId.startsWith('d') ? 'ƒêan d∆∞·ª£c cao c·∫•p c·∫ßn ƒëan ph∆∞∆°ng' : 'Linh th·∫°ch c·∫ßn nhi·ªÅu linh th·∫°ch th·∫•p h∆°n';
                craftPillsEmbed.addFields({
                    name: `${itemData.icon} ${itemData.name}`,
                    value: `**Nguy√™n li·ªáu:** ${ingredients}\n**T·ªâ l·ªá th√†nh c√¥ng:** \`${recipe.successRate}%\`\n**L·ªánh:** \`!craft ${itemId}\`\n**M√¥ t·∫£:** ${description}`,
                    inline: true
                });
            }
        });
        
        craftPillsEmbed.addFields({
            name: '‚úÖ L∆∞u √Ω v·ªÅ ch·∫ø t·∫°o',
            value: '‚Ä¢ **ƒêan ph∆∞∆°ng & ƒëan l√≤:** Mua t·ª´ `!shop` b·∫±ng linh th·∫°ch\n' +
                   '‚Ä¢ **Nguy√™n li·ªáu:** Thu th·∫≠p t·ª´ `!farm` (1-7)\n' +
                   '‚Ä¢ **T·ª• linh th·∫°ch:** Mua t·ª´ `!shop` ƒë·ªÉ craft linh th·∫°ch cao\n' +
                   '‚Ä¢ **T·ªâ l·ªá th√†nh c√¥ng:** 50% (c·∫ßn chu·∫©n b·ªã d·ª± ph√≤ng)',
            inline: false
        });
        pages.push(craftPillsEmbed);

        // Page 3: FUSION - ƒêan d∆∞·ª£c  
        const fusionMedPillsEmbed = new EmbedBuilder()
            .setTitle('‚öóÔ∏è FUSION - ƒêan d∆∞·ª£c')
            .setDescription('**Dung h·ª£p ƒëan d∆∞·ª£c c·∫•p th·∫•p th√†nh c·∫•p cao h∆°n**')
            .setColor(0xff6600)
            .setTimestamp()
            .setFooter({ 
                text: `Trang 3/5 ‚Ä¢ Y√™u c·∫ßu b·ªüi ${message.author.username}`, 
                iconURL: message.author.displayAvatarURL() 
            });

        // Filter fusion recipes for d series only (b·ªè z series)
        const dFusionRecipes = Object.entries(FUSION_RECIPES).filter(([itemId]) => 
            itemId.startsWith('d')
        );
        
        dFusionRecipes.forEach(([itemId, recipe]) => {
            const itemData = MEDICINES[itemId];
            
            if (itemData) {
                const ingredients = Object.entries(recipe.required).map(([id, qty]) => {
                    const sourceData = MEDICINES[id] || SHOP_ITEMS[id] || SPIRIT_STONES[id];
                    return `${sourceData?.icon} \`${qty}\``;
                }).join(' + ');

                fusionMedPillsEmbed.addFields({
                    name: `${itemData.icon} ${itemData.name} üîÆ`,
                    value: `**Nguy√™n li·ªáu:** ${ingredients}\n**T·ªâ l·ªá th√†nh c√¥ng:** \`${recipe.successRate}%\`\n**L·ªánh:** \`!craft ${itemId} fusion\`\n**Lo·∫°i:** ƒêan d∆∞·ª£c`,
                    inline: true
                });
            }
        });
        
        fusionMedPillsEmbed.addFields({
            name: 'üî¨ Nguy√™n l√Ω Fusion ƒêan d∆∞·ª£c',
            value: '‚Ä¢ **ƒêan d∆∞·ª£c Fusion:** 9x ƒëan d∆∞·ª£c + ƒëan l√≤ ‚Üí ƒëan d∆∞·ª£c c·∫•p cao\n' +
                   '‚Ä¢ **T·ªâ l·ªá th√†nh c√¥ng:** 50% (th·∫•p h∆°n craft)\n' +
                   '‚Ä¢ **L·ª£i √≠ch:** Ti·∫øt ki·ªám nguy√™n li·ªáu khi c√≥ nhi·ªÅu ƒëan d∆∞·ª£c c·∫•p th·∫•p\n' +
                   '‚Ä¢ **L∆∞u √Ω:** Lu√¥n c·∫ßn th√™m ƒëan l√≤ cho m·ªçi fusion ƒëan d∆∞·ª£c',
            inline: false
        });
        pages.push(fusionMedPillsEmbed);

        // Page 4: FUSION - ƒêan ph∆∞∆°ng
        const fusionAdvancedEmbed = new EmbedBuilder()
            .setTitle('‚öóÔ∏è FUSION - ƒêan ph∆∞∆°ng')
            .setDescription('**Dung h·ª£p ƒëan ph∆∞∆°ng - v·∫≠t ph·∫©m cao c·∫•p ƒë·ªÉ craft ƒëan d∆∞·ª£c**')
            .setColor(0x8b00ff)
            .setTimestamp()
            .setFooter({ 
                text: `Trang 4/5 ‚Ä¢ Y√™u c·∫ßu b·ªüi ${message.author.username}`, 
                iconURL: message.author.displayAvatarURL() 
            });

        // Filter fusion recipes for dp series only
        const dpFusionRecipes = Object.entries(FUSION_RECIPES).filter(([itemId]) => 
            itemId.startsWith('dp')
        );
        
        dpFusionRecipes.forEach(([itemId, recipe]) => {
            const itemData = SHOP_ITEMS[itemId] || SPIRIT_STONES[itemId];
            
            if (itemData) {
                const ingredients = Object.entries(recipe.required).map(([id, qty]) => {
                    const sourceData = SHOP_ITEMS[id] || SPIRIT_STONES[id];
                    return `${sourceData?.icon} \`${qty}\``;
                }).join(' + ');

                fusionAdvancedEmbed.addFields({
                    name: `${itemData.icon} ${itemData.name} üìú`,
                    value: `**Nguy√™n li·ªáu:** ${ingredients}\n**T·ªâ l·ªá th√†nh c√¥ng:** \`${recipe.successRate}%\`\n**L·ªánh:** \`!craft ${itemId} fusion\`\n**Lo·∫°i:** ƒêan ph∆∞∆°ng`,
                    inline: true
                });
            }
        });
        
        fusionAdvancedEmbed.addFields({
            name: 'üìú V·ªÅ ƒêan ph∆∞∆°ng',
            value: '‚Ä¢ **ƒêan ph∆∞∆°ng:** C·∫ßn thi·∫øt ƒë·ªÉ craft ƒëan d∆∞·ª£c\n' +
                   '‚Ä¢ **Fusion:** 9x ƒëan ph∆∞∆°ng th·∫•p h∆°n + 1x ph·ªëi ƒëan ph∆∞∆°ng\n' +
                   '‚Ä¢ **T·ªâ l·ªá th√†nh c√¥ng:** 50% (r·ªßi ro cao)\n' +
                   '‚Ä¢ **Mua t·ª´ shop:** ƒêan ph∆∞∆°ng v√† ph·ªëi ƒëan ph∆∞∆°ng b·∫±ng linh th·∫°ch',
            inline: false
        });
        pages.push(fusionAdvancedEmbed);

        // Page 5: Materials & Guide
        const materialsEmbed = new EmbedBuilder()
            .setTitle('üì¶ Nguy√™n li·ªáu & H∆∞·ªõng d·∫´n')
            .setDescription('**Th√¥ng tin v·ªÅ nguy√™n li·ªáu v√† c√°ch s·ª≠ d·ª•ng h·ªá th·ªëng**')
            .setColor(0x6600ff)
            .setTimestamp()
            .setFooter({ 
                text: `Trang 5/5 ‚Ä¢ Y√™u c·∫ßu b·ªüi ${message.author.username}`, 
                iconURL: message.author.displayAvatarURL() 
            })
            .addFields([
                {
                    name: 'üåø Nguy√™n li·ªáu Farm',
                    value: Object.entries(FARM_MATERIALS).map(([id, data]) => 
                        `${data.icon} **${data.name}** - \`!farm\``
                    ).join('\n'),
                    inline: true
                },
                {
                    name: 'üß™ ƒêan ph∆∞∆°ng & ƒêan l√≤',
                    value: ['dp1', 'dp2', 'dp3', 'dp4', 'pdp', 'dl', 'tlt'].map(id => 
                        `${SHOP_ITEMS[id]?.icon} **${SHOP_ITEMS[id]?.name}** - \`!shop buy ${id}\``
                    ).join('\n'),
                    inline: true
                },
                {
                    name: 'üíé Linh th·∫°ch',
                    value: Object.entries(SPIRIT_STONES).map(([id, data]) => 
                        `${data.icon} **${data.name}**`
                    ).join('\n'),
                    inline: true
                },
                {
                    name: 'üìñ H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng',
                    value: '‚Ä¢ `!craft <item>` - Gh√©p b·∫±ng nguy√™n li·ªáu\n' +
                           '‚Ä¢ `!craft <item> fusion` - Dung h·ª£p v·∫≠t ph·∫©m\n' +
                           '‚Ä¢ `!inv` - Xem inventory hi·ªán t·∫°i\n' +
                           '‚Ä¢ `!farm` - Thu th·∫≠p nguy√™n li·ªáu (1-7) + linh th·∫°ch (lt1)\n' +
                           '‚Ä¢ `!shop` - Mua ƒëan ph∆∞∆°ng, ƒëan l√≤, t·ª• linh th·∫°ch\n' +
                           '‚Ä¢ `!breakthrough` - Nh·∫≠n linh th·∫°ch t·ª´ ƒë·ªôt ph√°',
                    inline: true
                },
                {
                    name: 'üí° Tips & Chi·∫øn thu·∫≠t',
                    value: '‚Ä¢ **Ki·ªÉm tra inventory:** `!inv materials`, `!inv medicines`, `!inv stones`\n' +
                           '‚Ä¢ **T√≠ch l≈©y ƒëan l√≤ (dl):** C·∫ßn thi·∫øt cho m·ªçi ƒëan d∆∞·ª£c\n' +
                           '‚Ä¢ **Fusion th√¥ng minh:** D√πng khi c√≥ nhi·ªÅu v·∫≠t ph·∫©m c·∫•p th·∫•p\n' +
                           '‚Ä¢ **ƒê·ªôt ph√° th∆∞·ªùng xuy√™n:** ƒê·ªÉ c√≥ linh th·∫°ch fusion',
                    inline: true
                },
                {
                    name: '‚ö†Ô∏è L∆∞u √Ω quan tr·ªçng',
                    value: 'üî• **Nguy√™n li·ªáu s·∫Ω b·ªã ti√™u hao d√π th√†nh c√¥ng hay th·∫•t b·∫°i!**\n' +
                           'üí∞ **T√≠nh to√°n k·ªπ tr∆∞·ªõc khi craft/fusion**\n' +
                           'üéØ **T·ªâ l·ªá th√†nh c√¥ng:** Craft > Fusion\n' +
                           'üìà **Hi·ªáu qu·∫£:** ƒêan d∆∞·ª£c > Thu·ªëc th∆∞·ªùng',
                    inline: false
                }
            ]);
        pages.push(materialsEmbed);

        // T·∫°o buttons
        const createButtons = (currentPage, totalPages) => {
            const buttons = [];
            
            // Previous button
            buttons.push(
                new ButtonBuilder()
                    .setCustomId('craft_prev')
                    .setLabel('‚óÄ Tr∆∞·ªõc')
                    .setStyle(ButtonStyle.Secondary)
                    .setDisabled(currentPage === 0)
            );
            
            // Page indicator
            buttons.push(
                new ButtonBuilder()
                    .setCustomId('craft_page')
                    .setLabel(`${currentPage + 1}/${totalPages}`)
                    .setStyle(ButtonStyle.Primary)
                    .setDisabled(true)
            );
            
            // Next button
            buttons.push(
                new ButtonBuilder()
                    .setCustomId('craft_next')
                    .setLabel('Sau ‚ñ∂')
                    .setStyle(ButtonStyle.Secondary)
                    .setDisabled(currentPage === totalPages - 1)
            );
            
            // Jump to overview (always show except on page 1)
            if (currentPage !== 0) {
                buttons.push(
                    new ButtonBuilder()
                        .setCustomId('craft_home')
                        .setLabel('üè† T·ªïng quan')
                        .setStyle(ButtonStyle.Success)
                );
            }
            
            // Quick navigation to specific sections
            if (totalPages === 5 && currentPage === 0) {
                // Add quick access button on overview page
                buttons.push(
                    new ButtonBuilder()
                        .setCustomId('craft_jump')
                        .setLabel('üöÄ Chuy·ªÉn nhanh')
                        .setStyle(ButtonStyle.Secondary)
                );
            }
            
            return new ActionRowBuilder().addComponents(buttons);
        };

        // Send initial message
        let currentPage = 0;
        const reply = await message.reply({ 
            embeds: [pages[currentPage]], 
            components: [createButtons(currentPage, pages.length)]
        });

        // Handle pagination
        const collector = reply.createMessageComponentCollector({
            componentType: ComponentType.Button,
            time: 300000, // 5 minutes
            filter: i => i.user.id === message.author.id
        });

        collector.on('collect', async interaction => {
            if (interaction.customId === 'craft_prev' && currentPage > 0) {
                currentPage--;
            } else if (interaction.customId === 'craft_next' && currentPage < pages.length - 1) {
                currentPage++;
            } else if (interaction.customId === 'craft_home') {
                currentPage = 0;
            } else if (interaction.customId === 'craft_jump') {
                // Show quick navigation info
                                        await interaction.followUp({
                            content: 'üöÄ **Chuy·ªÉn nhanh ƒë·∫øn trang b·∫±ng n√∫t navigation:**\n\n' +
                                     'üìñ **M·ª•c l·ª•c 5 trang:**\n' +
                                     '‚Ä¢ **Trang 1:** üè† T·ªïng quan h·ªá th·ªëng\n' +
                                     '‚Ä¢ **Trang 2:** üî® CRAFT ƒêan d∆∞·ª£c (d1-d4)\n' +
                                     '‚Ä¢ **Trang 3:** ‚öóÔ∏è FUSION ƒêan d∆∞·ª£c\n' +
                                     '‚Ä¢ **Trang 4:** ‚öóÔ∏è FUSION ƒêan ph∆∞∆°ng & Linh th·∫°ch\n' +
                                     '‚Ä¢ **Trang 5:** üì¶ Nguy√™n li·ªáu & H∆∞·ªõng d·∫´n\n\n' +
                                     'üí° **D√πng n√∫t `‚óÄ Tr∆∞·ªõc` v√† `Sau ‚ñ∂` ƒë·ªÉ chuy·ªÉn trang**',
                            ephemeral: true
                        });
                return; // Don't update main message
            }

            await interaction.update({
                embeds: [pages[currentPage]],
                components: [createButtons(currentPage, pages.length)]
            });
        });

        collector.on('end', () => {
            // Disable all buttons when expired
            const disabledButtons = createButtons(currentPage, pages.length);
            disabledButtons.components.forEach(button => {
                if (!button.data.disabled) button.setDisabled(true);
            });
            
            reply.edit({ 
                embeds: [pages[currentPage]], 
                components: [disabledButtons] 
            }).catch(() => {});
        });
    }
}; 