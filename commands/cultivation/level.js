const { getLevelByName, getNextLevel, canBreakthrough, rollBreakthrough } = require('../../utils/cultivationData');

module.exports = {
    name: 'level',
    aliases: ['rank', 'tu_luyen', 'cultivation'],
    description: 'Xem th√¥ng tin tu luy·ªán v√† th·ª≠ ƒë·ªôt ph√°',
    usage: '!level [user] ho·∫∑c !level breakthrough',
    examples: [
        '!level',
        '!level @user',
        '!level breakthrough',
        '!rank breakthrough'
    ],
    permissions: 'everyone',
    guildOnly: true,
    category: 'cultivation',

    async execute(message, args, client) {
        try {
            const userId = message.author.id;
            const guildId = message.guild.id;

            // Check target user
            let targetUser = message.author;
            if (args[0]) {
                const userMention = message.mentions.users.first();
                const userIdArg = args[0].replace(/[<@!>]/g, '');
                
                if (userMention) {
                    targetUser = userMention;
                } else {
                    try {
                        targetUser = await client.users.fetch(userIdArg);
                    } catch (error) {
                        return message.reply('‚ùå Kh√¥ng t√¨m th·∫•y user n√†y!');
                    }
                }
            }

            const targetUserId = targetUser.id;

            // Get cultivation user data
            const cultivationUser = await client.prisma.cultivationUser.findUnique({
                where: {
                    userId: targetUserId
                }
            });

            if (!cultivationUser) {
                return message.reply(`‚ùå **${targetUser.username}** ch∆∞a b·∫Øt ƒë·∫ßu tu luy·ªán! G·ª≠i tin nh·∫Øn trong server ƒë·ªÉ b·∫Øt ƒë·∫ßu nh·∫≠n EXP.`);
            }

            // Calculate VIP role bonus
            let roleBonus = 0;
            try {
                const member = await message.guild.members.fetch(targetUserId);
                if (member) {
                    const vipRoles = {
                        '‚ÄπPwB‚Ä∫ Booster': 100,
                        '‚ÄπPwB‚Ä∫ Vip 1': 10,
                        '‚ÄπPwB‚Ä∫ Vip 2': 20,
                        '‚ÄπPwB‚Ä∫ Vip 3': 30,
                        '‚ÄπPwB‚Ä∫ Vip 4': 40,
                        '‚ÄπPwB‚Ä∫ Vip 5': 50,
                        '‚ÄπPwB‚Ä∫ Vip 6': 60,
                        '‚ÄπPwB‚Ä∫ Vip 7': 70,
                        '‚ÄπPwB‚Ä∫ Vip 8': 80
                    };

                    member.roles.cache.forEach(role => {
                        if (vipRoles[role.name]) {
                            roleBonus += vipRoles[role.name];
                        }
                    });
                }
            } catch (error) {
                console.log('Could not fetch member for role bonus calculation');
            }

            // Get level data
            const currentLevelData = getLevelByName(cultivationUser.currentLevel);
            const nextLevelData = getNextLevel(cultivationUser.currentLevel);

            // Build simple text response
            let levelText = `üßò **${targetUser.username}** | **${cultivationUser.currentLevel}**\n`;

            // EXP info v·ªõi c√¥ng th·ª©c m·ªõi (1 tin nh·∫Øn = 1 EXP, 1 ph√∫t = 5 EXP)
            if (cultivationUser.messageCount !== undefined) {
                const messageCount = cultivationUser.messageCount || 0;
                const voiceTime = cultivationUser.voiceTime || 0;
                const voiceMinutes = Math.floor(voiceTime / 60);
                
                levelText += `‚ö° **EXP:** ${cultivationUser.exp} *(${messageCount} tin nh·∫Øn + ${voiceMinutes} ph√∫t voice`;
                if (roleBonus > 0) {
                    levelText += ` + bonus ${roleBonus}%`;
                }
                levelText += `)*\n`;
            } else {
                levelText += `‚ö° **EXP:** ${cultivationUser.exp} *(ƒëang n√¢ng c·∫•p h·ªá th·ªëng...)*\n`;
            }

            if (currentLevelData && nextLevelData) {
                const expNeeded = currentLevelData.exp;
                const progress = Math.min(Math.floor((cultivationUser.exp / expNeeded) * 100), 100);
                const expRemaining = Math.max(expNeeded - cultivationUser.exp, 0);
                
                levelText += `üìä **Progress:** ${cultivationUser.exp}/${expNeeded} **(${progress}%)**\n`;
                levelText += `‚¨ÜÔ∏è **Level ti·∫øp theo:** ${nextLevelData.name}\n`;
                levelText += `üé≤ **T·ªâ l·ªá ƒë·ªôt ph√°:** ${currentLevelData.breakRate}%\n`;
                
                // Penalty warning
                if (currentLevelData.expPenalty > 0 || currentLevelData.itemPenalty > 0) {
                    levelText += `‚ö†Ô∏è **Penalty n·∫øu th·∫•t b·∫°i:** ${currentLevelData.expPenalty}% EXP + ${currentLevelData.itemPenalty} v·∫≠t ph·∫©m\n`;
                }
                
                // Breakthrough status
                const canBreak = canBreakthrough(cultivationUser.currentLevel, cultivationUser.exp);
                if (canBreak) {
                    levelText += `\nüåü **READY TO BREAKTHROUGH!**\n`;
                    levelText += `üí• D√πng \`!breakthrough\` ƒë·ªÉ th·ª≠ ƒë·ªôt ph√°!`;
                } else {
                    levelText += `\nüí° **C√°ch nh·∫≠n EXP:**\n`;
                    if (cultivationUser.messageCount !== undefined) {
                        levelText += `‚Ä¢ **1 tin nh·∫Øn** = 1 EXP\n`;
                        levelText += `‚Ä¢ **1 ph√∫t voice** = 5 EXP\n`;
                        levelText += `‚Ä¢ **Bonus t·ª´ VIP roles** (c√≥ th·ªÉ c·ªông d·ªìn)\n`;
                        
                        if (expRemaining <= 50) {
                            levelText += `‚è∞ C·∫ßn th√™m **${expRemaining} EXP** ƒë·ªÉ ƒë·ªôt ph√°!`;
                        }
                    } else {
                        levelText += `‚Ä¢ Chat v√† voice ƒë·ªÉ nh·∫≠n EXP\n`;
                        levelText += `‚Ä¢ H·ªá th·ªëng ƒëang ƒë∆∞·ª£c n√¢ng c·∫•p`;
                    }
                }

            } else if (!nextLevelData) {
                levelText += `\nüèÜ **ƒê√É ƒê·∫†T LEVEL T·ªêI ƒêA!**\n`;
                levelText += `üéâ Ch√∫c m·ª´ng b·∫°n ƒë√£ ho√†n th√†nh h√†nh tr√¨nh tu luy·ªán!`;
            } else {
                levelText += `\n‚ùì **L·ªói d·ªØ li·ªáu level** - Vui l√≤ng b√°o admin!`;
            }

            await message.reply(levelText);

        } catch (error) {
            console.error('Error in level command:', error);
            await message.reply(`‚ùå L·ªói level: ${error.message}`);
        }
    }
}; 