const { SPIRIT_STONES, SHOP_ITEMS } = require('../../utils/cultivationData');
const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, ComponentType } = require('discord.js');

module.exports = {
    name: 'muahang',
    aliases: ['shop', 'mua', 'muahang'],
    description: 'Mua v·∫≠t ph·∫©m t·ª´ c·ª≠a h√†ng b·∫±ng linh th·∫°ch',
    usage: '!muahang [item] [quantity]',
    examples: [
        '!muahang - Xem c·ª≠a h√†ng',
        '!muahang dp1 5 - Mua 5 ƒëan ph∆∞∆°ng h·∫° ph·∫©m',
        '!shop dl 1 - Mua 1 ƒëan l√≤'
    ],
    permissions: 'everyone',
    guildOnly: true,
    category: 'cultivation',

    async execute(message, args, client) {
        try {
            const userId = message.author.id;
            const guildId = message.guild.id;

            // If no args, show shop
            if (!args[0]) {
                return this.showShop(message, client);
            }

            const itemId = args[0].toLowerCase();
            const quantity = parseInt(args[1]) || 1;

            if (quantity <= 0 || quantity > 100) {
                return message.reply('‚ùå S·ªë l∆∞·ª£ng ph·∫£i t·ª´ 1-100!');
            }

            // Check if item exists in shop
            const shopItem = SHOP_ITEMS[itemId];
            if (!shopItem) {
                return message.reply(`‚ùå Kh√¥ng t√¨m th·∫•y item "${itemId}" trong c·ª≠a h√†ng! S·ª≠ d·ª•ng \`!muahang\` ƒë·ªÉ xem danh s√°ch.`);
            }

            // Get user data
            const cultivationUser = await client.prisma.cultivationUser.findUnique({
                where: {
                    userId: userId
                }
            });

            if (!cultivationUser) {
                return message.reply(`‚ùå **${message.author.username}** ch∆∞a b·∫Øt ƒë·∫ßu tu luy·ªán! G·ª≠i tin nh·∫Øn trong server ƒë·ªÉ b·∫Øt ƒë·∫ßu nh·∫≠n EXP.`);
            }

            // Calculate price (base price * quantity)
            const basePrice = this.getItemPrice(itemId);
            const totalPrice = basePrice * quantity;

            // Check if user has enough linh th·∫°ch
            const userLinhThach = await this.getUserLinhThach(client, userId);
            
            if (userLinhThach < totalPrice) {
                const missing = totalPrice - userLinhThach;
                return message.reply(`‚ùå **${message.author.username}** kh√¥ng ƒë·ªß linh th·∫°ch!\nüíé C·∫ßn: **${totalPrice}** linh th·∫°ch\nüíé C√≥: **${userLinhThach}** linh th·∫°ch\nüíé Thi·∫øu: **${missing}** linh th·∫°ch`);
            }

            // Show confirmation
            const confirmEmbed = new EmbedBuilder()
                .setTitle('ÔøΩÔ∏è X√°c nh·∫≠n mua h√†ng')
                .setDescription(`**${message.author.username}** mu·ªën mua **${shopItem.name}**`)
                .setColor(0x00ff88)
                .addFields([
                    {
                        name: 'üì¶ Th√¥ng tin mua h√†ng',
                        value: `‚Ä¢ **V·∫≠t ph·∫©m:** ${shopItem.icon} ${shopItem.name}\n‚Ä¢ **S·ªë l∆∞·ª£ng:** ${quantity}\n‚Ä¢ **Gi√°:** ${basePrice} linh th·∫°ch/c√°i\n‚Ä¢ **T·ªïng ti·ªÅn:** ${totalPrice} linh th·∫°ch`,
                        inline: false
                    },
                    {
                        name: 'üí∞ Th√¥ng tin t√†i kho·∫£n',
                        value: `‚Ä¢ **Linh th·∫°ch hi·ªán t·∫°i:** ${userLinhThach}\n‚Ä¢ **Linh th·∫°ch sau mua:** ${userLinhThach - totalPrice}`,
                        inline: false
                    }
                ])
                .setTimestamp()
                .setFooter({ 
                    text: `Mua H√†ng ‚Ä¢ ${message.author.username}`, 
                    iconURL: message.author.displayAvatarURL() 
                });

            const confirmButtons = new ActionRowBuilder()
                .addComponents(
                    new ButtonBuilder()
                        .setCustomId('shop_confirm')
                        .setLabel('‚úÖ X√°c nh·∫≠n mua')
                        .setStyle(ButtonStyle.Success),
                    new ButtonBuilder()
                        .setCustomId('shop_cancel')
                        .setLabel('‚ùå H·ªßy b·ªè')
                        .setStyle(ButtonStyle.Danger)
                );

            const reply = await message.reply({ 
                embeds: [confirmEmbed], 
                components: [confirmButtons] 
            });

            // Handle button interactions
            const collector = reply.createMessageComponentCollector({
                componentType: ComponentType.Button,
                time: 60000, // 1 minute
                filter: i => i.user.id === message.author.id
            });

            collector.on('collect', async interaction => {
                if (interaction.customId === 'shop_confirm') {
                    await this.performPurchase(interaction, client, userId, itemId, quantity, totalPrice, shopItem);
                } else if (interaction.customId === 'shop_cancel') {
                    const cancelEmbed = new EmbedBuilder()
                        .setTitle('‚ùå ƒê√£ h·ªßy mua h√†ng')
                        .setDescription('Giao d·ªãch mua h√†ng ƒë√£ b·ªã h·ªßy.')
                        .setColor(0xff4444)
                        .setTimestamp()
                        .setFooter({ 
                            text: `Mua H√†ng ‚Ä¢ ${message.author.username}`, 
                            iconURL: message.author.displayAvatarURL() 
                        });

                    await interaction.update({ 
                        embeds: [cancelEmbed], 
                        components: [] 
                    });
                }
            });

            collector.on('end', () => {
                // Disable buttons when expired
                const disabledButtons = new ActionRowBuilder()
                    .addComponents(
                        new ButtonBuilder()
                            .setCustomId('shop_confirm')
                            .setLabel('‚úÖ X√°c nh·∫≠n mua')
                            .setStyle(ButtonStyle.Success)
                            .setDisabled(true),
                        new ButtonBuilder()
                            .setCustomId('shop_cancel')
                            .setLabel('‚ùå H·ªßy b·ªè')
                            .setStyle(ButtonStyle.Danger)
                            .setDisabled(true)
                    );
                
                reply.edit({ components: [disabledButtons] }).catch(() => {});
            });

        } catch (error) {
            console.error('Error in muahang command:', error);
            await message.reply(`‚ùå L·ªói mua h√†ng: ${error.message}`);
        }
    },

    async performPurchase(interaction, client, userId, itemId, quantity, totalPrice, shopItem) {
        try {
            // Check again if user has enough linh th·∫°ch
            const userLinhThach = await this.getUserLinhThach(client, userId);
            
            if (userLinhThach < totalPrice) {
                const missing = totalPrice - userLinhThach;
                const errorEmbed = new EmbedBuilder()
                    .setTitle('‚ùå Kh√¥ng ƒë·ªß linh th·∫°ch!')
                    .setDescription(`**${interaction.user.username}** kh√¥ng ƒë·ªß linh th·∫°ch ƒë·ªÉ mua h√†ng!`)
                    .setColor(0xff4444)
                    .addFields({
                        name: 'üí∞ Th√¥ng tin t√†i kho·∫£n',
                        value: `‚Ä¢ **C·∫ßn:** ${totalPrice} linh th·∫°ch\n‚Ä¢ **C√≥:** ${userLinhThach} linh th·∫°ch\n‚Ä¢ **Thi·∫øu:** ${missing} linh th·∫°ch`,
                        inline: false
                    })
                    .setTimestamp()
                    .setFooter({ 
                        text: `Mua H√†ng ‚Ä¢ ${interaction.user.username}`, 
                        iconURL: interaction.user.displayAvatarURL() 
                    });

                return await interaction.update({ 
                    embeds: [errorEmbed], 
                    components: [] 
                });
            }

            // Deduct linh th·∫°ch
            await client.prisma.userInventory.update({
                where: {
                    userId_itemType_itemId: {
                        userId: userId,
                        itemType: 'material',
                        itemId: 'lt1'
                    }
                },
                data: {
                    quantity: {
                        decrement: totalPrice
                    }
                }
            });

            // Add purchased item
            await client.prisma.userInventory.upsert({
                where: {
                    userId_itemType_itemId: {
                        userId: userId,
                        itemType: shopItem.category,
                        itemId: itemId
                    }
                },
                update: {
                    quantity: {
                        increment: quantity
                    }
                },
                create: {
                    userId: userId,
                    itemType: shopItem.category,
                    itemId: itemId,
                    quantity: quantity
                }
            });

            // Success embed
            const successEmbed = new EmbedBuilder()
                .setTitle('üéâ Mua H√†ng Th√†nh C√¥ng!')
                .setDescription(`**${interaction.user.username}** ƒë√£ mua h√†ng th√†nh c√¥ng!`)
                .setColor(0x00ff00)
                .addFields([
                    {
                        name: 'üì¶ V·∫≠t ph·∫©m ƒë√£ mua',
                        value: `‚Ä¢ **${shopItem.icon} ${shopItem.name}** x${quantity}`,
                        inline: false
                    },
                    {
                        name: 'üí∞ Chi ph√≠',
                        value: `‚Ä¢ **ƒê√£ tr·∫£:** ${totalPrice} linh th·∫°ch\n‚Ä¢ **C√≤n l·∫°i:** ${userLinhThach - totalPrice} linh th·∫°ch`,
                        inline: false
                    }
                ])
                .setTimestamp()
                .setFooter({ 
                    text: `Mua H√†ng ‚Ä¢ ${interaction.user.username}`, 
                    iconURL: interaction.user.displayAvatarURL() 
                });

            await interaction.update({ 
                embeds: [successEmbed], 
                components: [] 
            });

        } catch (error) {
            console.error('Error in performPurchase:', error);
            await interaction.update({ 
                content: `‚ùå L·ªói mua h√†ng: ${error.message}`,
                embeds: [],
                components: [] 
            });
        }
    },

    async showShop(message, client) {
        try {
            const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, ComponentType } = require('discord.js');

            // Create shop pages
            const pages = [];
            
            // Page 1: ƒêan ph∆∞∆°ng v√† ƒëan l√≤
            const medicineEmbed = new EmbedBuilder()
                .setTitle('üè™ C·ª≠a H√†ng - ƒêan Ph∆∞∆°ng & ƒêan L√≤')
                .setDescription('**Danh s√°ch ƒëan ph∆∞∆°ng v√† ƒëan l√≤ c√≥ th·ªÉ mua:**')
                .setColor(0x00ff88)
                .setTimestamp()
                .setFooter({ 
                    text: `Trang 1/2 ‚Ä¢ Mua H√†ng ‚Ä¢ ${message.author.username}`, 
                    iconURL: message.author.displayAvatarURL() 
                });

            const medicineItems = [
                {
                    id: 'dp1',
                    name: `${SHOP_ITEMS['dp1'].icon || SHOP_ITEMS['dp1'].fallbackIcon || 'üìú'} H·∫° ph·∫©m ƒëan ph∆∞∆°ng (dp1)`,
                    price: '100 linh th·∫°ch',
                    description: 'ƒêan ph∆∞∆°ng c·∫•p th·∫•p, d√πng ƒë·ªÉ ch·∫ø t·∫°o ƒëan d∆∞·ª£c'
                },
                {
                    id: 'dp2',
                    name: `${SHOP_ITEMS['dp2'].icon || SHOP_ITEMS['dp2'].fallbackIcon || 'üìÉ'} Trung ph·∫©m ƒëan ph∆∞∆°ng (dp2)`,
                    price: '500 linh th·∫°ch',
                    description: 'ƒêan ph∆∞∆°ng trung b√¨nh, d√πng ƒë·ªÉ ch·∫ø t·∫°o ƒëan d∆∞·ª£c'
                },
                {
                    id: 'dp3',
                    name: `${SHOP_ITEMS['dp3'].icon || SHOP_ITEMS['dp3'].fallbackIcon || 'üìã'} Th∆∞·ª£ng ph·∫©m ƒëan ph∆∞∆°ng (dp3)`,
                    price: '1000 linh th·∫°ch',
                    description: 'ƒêan ph∆∞∆°ng cao c·∫•p, d√πng ƒë·ªÉ ch·∫ø t·∫°o ƒëan d∆∞·ª£c'
                },
                {
                    id: 'dp4',
                    name: `${SHOP_ITEMS['dp4'].icon || SHOP_ITEMS['dp4'].fallbackIcon || 'üìä'} Ti√™n ph·∫©m ƒëan ph∆∞∆°ng (dp4)`,
                    price: '2000 linh th·∫°ch',
                    description: 'ƒêan ph∆∞∆°ng ti√™n ph·∫©m, d√πng ƒë·ªÉ ch·∫ø t·∫°o ƒëan d∆∞·ª£c'
                },
                {
                    id: 'pdp',
                    name: `${SHOP_ITEMS['pdp'].icon || SHOP_ITEMS['pdp'].fallbackIcon || 'üìà'} Ph·ªëi ƒëan ph∆∞∆°ng (pdp)`,
                    price: '5000 linh th·∫°ch',
                    description: 'Ph·ªëi ƒëan ph∆∞∆°ng, d√πng ƒë·ªÉ ch·∫ø t·∫°o ƒëan ph∆∞∆°ng cao c·∫•p'
                },
                {
                    id: 'dl',
                    name: `${SHOP_ITEMS['dl'].icon || SHOP_ITEMS['dl'].fallbackIcon || 'üè∫'} ƒêan l√≤ (dl)`,
                    price: '1000 linh th·∫°ch',
                    description: 'ƒêan l√≤, d√πng ƒë·ªÉ ch·∫ø t·∫°o ƒëan d∆∞·ª£c'
                }
            ];

            let medicineText = '';
            medicineItems.forEach(item => {
                medicineText += `**${item.name}**\n`;
                medicineText += `üí∞ Gi√°: ${item.price}\n`;
                medicineText += `üìù M√¥ t·∫£: ${item.description}\n\n`;
            });

            medicineEmbed.addFields({
                name: 'üß™ ƒêan Ph∆∞∆°ng & ƒêan L√≤',
                value: medicineText,
                inline: false
            });

            pages.push(medicineEmbed);

            // Page 2: T·ª• linh th·∫°ch
            const materialEmbed = new EmbedBuilder()
                .setTitle('üè™ C·ª≠a H√†ng - T·ª• Linh Th·∫°ch')
                .setDescription('**Danh s√°ch t·ª• linh th·∫°ch c√≥ th·ªÉ mua:**')
                .setColor(0x00ff88)
                .setTimestamp()
                .setFooter({ 
                    text: `Trang 2/2 ‚Ä¢ Mua H√†ng ‚Ä¢ ${message.author.username}`, 
                    iconURL: message.author.displayAvatarURL() 
                });

            const materialItems = [
                {
                    id: 'tlt',
                    name: `${SHOP_ITEMS['tlt'].icon || SHOP_ITEMS['tlt'].fallbackIcon || 'üí´'} T·ª• linh th·∫°ch (tlt)`,
                    price: '10000 linh th·∫°ch',
                    description: 'T·ª• linh th·∫°ch, d√πng ƒë·ªÉ ch·∫ø t·∫°o linh th·∫°ch cao c·∫•p'
                }
            ];

            let materialText = '';
            materialItems.forEach(item => {
                materialText += `**${item.name}**\n`;
                materialText += `üí∞ Gi√°: ${item.price}\n`;
                materialText += `üìù M√¥ t·∫£: ${item.description}\n\n`;
            });

            materialEmbed.addFields({
                name: 'üíé T·ª• Linh Th·∫°ch',
                value: materialText,
                inline: false
            });

            pages.push(materialEmbed);

            // Create navigation buttons
            const createButtons = (currentPage, totalPages) => {
                const buttons = [];
                
                buttons.push(
                    new ButtonBuilder()
                        .setCustomId('shop_prev')
                        .setLabel('‚óÄ Tr∆∞·ªõc')
                        .setStyle(ButtonStyle.Secondary)
                        .setDisabled(currentPage === 0)
                );
                
                buttons.push(
                    new ButtonBuilder()
                        .setCustomId('shop_page')
                        .setLabel(`${currentPage + 1}/${totalPages}`)
                        .setStyle(ButtonStyle.Primary)
                        .setDisabled(true)
                );
                
                buttons.push(
                    new ButtonBuilder()
                        .setCustomId('shop_next')
                        .setLabel('Sau ‚ñ∂')
                        .setStyle(ButtonStyle.Secondary)
                        .setDisabled(currentPage === totalPages - 1)
                );
                
                return new ActionRowBuilder().addComponents(buttons);
            };

            // Send initial message
            let currentPage = 0;
            const reply = await message.reply({ 
                embeds: [pages[currentPage]], 
                components: [createButtons(currentPage, pages.length)]
            });

            // Handle pagination
            const collector = reply.createMessageComponentCollector({
                componentType: ComponentType.Button,
                time: 300000, // 5 minutes
                filter: i => i.user.id === message.author.id
            });

            collector.on('collect', async interaction => {
                if (interaction.customId === 'shop_prev' && currentPage > 0) {
                    currentPage--;
                } else if (interaction.customId === 'shop_next' && currentPage < pages.length - 1) {
                    currentPage++;
                }

                await interaction.update({
                    embeds: [pages[currentPage]],
                    components: [createButtons(currentPage, pages.length)]
                });
            });

            collector.on('end', () => {
                // Disable all buttons when expired
                const disabledButtons = createButtons(currentPage, pages.length);
                disabledButtons.components.forEach(button => {
                    if (!button.data.disabled) button.setDisabled(true);
                });
                
                reply.edit({ 
                    embeds: [pages[currentPage]], 
                    components: [disabledButtons] 
                }).catch(() => {});
            });

        } catch (error) {
            console.error('Error in showShop:', error);
            await message.reply(`‚ùå L·ªói hi·ªÉn th·ªã c·ª≠a h√†ng: ${error.message}`);
        }
    },

    getItemPrice(itemId) {
        const prices = {
            'dp1': 100,   // H·∫° ph·∫©m ƒëan ph∆∞∆°ng
            'dp2': 500,   // Trung ph·∫©m ƒëan ph∆∞∆°ng
            'dp3': 1000,  // Th∆∞·ª£ng ph·∫©m ƒëan ph∆∞∆°ng
            'dp4': 2000,  // Ti√™n ph·∫©m ƒëan ph∆∞∆°ng
            'pdp': 5000,  // Ph·ªëi ƒëan ph∆∞∆°ng
            'dl': 1000,   // ƒêan l√≤
            'tlt': 10000  // T·ª• linh th·∫°ch
        };
        
        return prices[itemId] || 0;
    },

    async getUserLinhThach(client, userId) {
        try {
            const linhThach = await client.prisma.userInventory.findUnique({
                where: {
                    userId_itemType_itemId: {
                        userId: userId,
                        itemType: 'material',
                        itemId: 'lt1'
                    }
                }
            });
            
            return linhThach ? linhThach.quantity : 0;
        } catch (error) {
            console.error('Error getting user linh th·∫°ch:', error);
            return 0;
        }
    }
}; 