const { MEDICINES, FARM_MATERIALS, SPIRIT_STONES, SHOP_ITEMS } = require('../../utils/cultivationData');

module.exports = {
    name: 'inventory',
    aliases: ['inv', 'kho', 'bag', 'zoo', 'materials', 'farm_items', 'nguyen_lieu', 'z'],
    description: 'Xem kho ƒë·ªì tu luy·ªán (nguy√™n li·ªáu + thu·ªëc + linh th·∫°ch + shop items) c·ªßa b·∫°n',
    usage: '!inventory [user] [type]',
    examples: [
        '!inventory - Xem t·∫•t c·∫£',
        '!inv @user - Xem c·ªßa user kh√°c', 
        '!inv materials - Ch·ªâ xem nguy√™n li·ªáu',
        '!inv medicines - Ch·ªâ xem thu·ªëc/ƒëan d∆∞·ª£c',
        '!inv stones - Ch·ªâ xem linh th·∫°ch',
        '!inv shop - Ch·ªâ xem v·∫≠t ph·∫©m shop',
        '!zoo - Alias c≈© v·∫´n ho·∫°t ƒë·ªông'
    ],
    permissions: 'everyone',
    guildOnly: true,
    category: 'cultivation',

    async execute(message, args, client) {
        try {
            // Parse arguments
            let targetUser = message.author;
            let filterType = 'all'; // 'all', 'materials', 'medicines', 'stones'
            
            // Check arguments
            for (const arg of args) {
                if (arg.startsWith('<@') || /^\d+$/.test(arg.replace(/[<@!>]/g, ''))) {
                    // This is a user mention or ID
                    const userMention = message.mentions.users.first();
                    const userId = arg.replace(/[<@!>]/g, '');
                    
                    if (userMention) {
                        targetUser = userMention;
                    } else {
                        try {
                            targetUser = await client.users.fetch(userId);
                        } catch (error) {
                            return message.reply('‚ùå Kh√¥ng t√¨m th·∫•y user n√†y!');
                        }
                    }
                } else if (['materials', 'material', 'nguyen_lieu', 'nl', 'farm'].includes(arg.toLowerCase())) {
                    filterType = 'materials';
                } else if (['medicines', 'medicine', 'thuoc', 'med', 'drugs'].includes(arg.toLowerCase())) {
                    filterType = 'medicines';
                } else if (['stones', 'stone', 'linh_thach', 'lt', 'spirit'].includes(arg.toLowerCase())) {
                    filterType = 'stones';
                } else if (['shop', 'cua_hang', 'books', 'sach', 'linh_dan', 'ld', 'ly'].includes(arg.toLowerCase())) {
                    filterType = 'shop';
                }
            }

            const userId = targetUser.id;

            // Get cultivation user data
            const cultivationUser = await client.prisma.cultivationUser.findUnique({
                where: {
                    userId: userId
                }
            });

            if (!cultivationUser) {
                return message.reply(`‚ùå **${targetUser.username}** ch∆∞a b·∫Øt ƒë·∫ßu tu luy·ªán! G·ª≠i tin nh·∫Øn trong server ƒë·ªÉ b·∫Øt ƒë·∫ßu nh·∫≠n EXP.`);
            }

            // Get inventory data
            const inventory = await client.prisma.userInventory.findMany({
                where: {
                    userId: userId
                },
                orderBy: { itemId: 'asc' }
            });

            // Separate materials, medicines, spirit stones, and shop items
            const materials = inventory.filter(item => item.itemType === 'material' && !item.itemId.startsWith('spirit_'));
            const medicines = inventory.filter(item => item.itemType === 'medicine' && !SHOP_ITEMS[item.itemId]);
            const spiritStones = inventory.filter(item => item.itemType === 'material' && item.itemId.startsWith('spirit_'));
            const shopItems = inventory.filter(item => item.itemType === 'book' || 
                (item.itemType === 'medicine' && SHOP_ITEMS[item.itemId]));

            // Build response
            let responseText = `====== **${targetUser.username}'s Cultivation Inventory** ======\n`;

            // Show materials if requested
            if (filterType === 'all' || filterType === 'materials') {
                responseText += `\nüåø **NGUY√äN LI·ªÜU FARM:**\n`;
                
                const materialDisplay = [];
                let totalMaterials = 0;
                
                // Basic materials (1-7)
                for (let i = 1; i <= 7; i++) {
                    const material = materials.find(m => m.itemId === i.toString());
                    const materialData = FARM_MATERIALS[i.toString()];
                    const quantity = material ? material.quantity : 0;
                    if (quantity > 0) {
                        materialDisplay.push(`${materialData.icon}${quantity}`);
                    }
                    totalMaterials += quantity;
                }
                
                // Special farmable materials (tlt, lt1)
                ['tlt', 'lt1'].forEach(itemId => {
                    const material = materials.find(m => m.itemId === itemId);
                    const materialData = FARM_MATERIALS[itemId];
                    const quantity = material ? material.quantity : 0;
                    if (quantity > 0) {
                        materialDisplay.push(`${materialData.icon}${quantity}`);
                    }
                    totalMaterials += quantity;
                });
                
                if (materialDisplay.length > 0) {
                    responseText += materialDisplay.join(' ') + '\n';
                } else {
                    responseText += 'üö´ Ch∆∞a c√≥ nguy√™n li·ªáu n√†o! D√πng `!farm` ƒë·ªÉ thu th·∫≠p.\n';
                }
            }

            // Show medicines if requested
            if (filterType === 'all' || filterType === 'medicines') {
                responseText += `\nüß™ **THU·ªêC & ƒêAN D∆Ø·ª¢C:**\n`;
                
                const medicineDisplay = [];
                
                // Kh√¥ng hi·ªÉn th·ªã thu·ªëc c≈© z series n·ªØa
                
                // ƒêan d∆∞·ª£c (d series)
                ['d1', 'd2', 'd3', 'd4'].forEach(medicineId => {
                    const medicine = medicines.find(m => m.itemId === medicineId);
                    const medicineData = MEDICINES[medicineId];
                    const quantity = medicine ? medicine.quantity : 0;
                    if (quantity > 0) {
                        medicineDisplay.push(`${medicineData.icon}${quantity}`);
                    }
                });
                
                // ƒêan ph∆∞∆°ng v√† ƒëan l√≤ (dp/dl series) - now farmable!
                ['dp1', 'dp2', 'dp3', 'dp4', 'pdp', 'dl'].forEach(medicineId => {
                    const medicine = medicines.find(m => m.itemId === medicineId);
                    const medicineData = MEDICINES[medicineId];
                    const quantity = medicine ? medicine.quantity : 0;
                    if (quantity > 0) {
                        medicineDisplay.push(`${medicineData.icon}${quantity}`);
                    }
                });

                if (medicineDisplay.length > 0) {
                    responseText += medicineDisplay.join(' ') + '\n';
                } else {
                    responseText += 'üö´ Ch∆∞a c√≥ thu·ªëc/ƒëan d∆∞·ª£c n√†o! D√πng `!craft` ho·∫∑c `!farm` ƒë·ªÉ thu th·∫≠p.\n';
                }
            }

            // Show spirit stones if requested
            if (filterType === 'all' || filterType === 'stones') {
                responseText += `\nüíé **LINH TH·∫†CH (t·ª´ ƒë·ªôt ph√°):**\n`;
                
                const stoneDisplay = [];
                let totalStones = 0;
                
                // Check for spirit stones (stored with spirit_ prefix)
                ['lt1', 'lt2', 'lt3', 'lt4'].forEach(stoneId => {
                    const stone = spiritStones.find(s => s.itemId === `spirit_${stoneId}`);
                    const stoneData = SPIRIT_STONES[stoneId];
                    const quantity = stone ? stone.quantity : 0;
                    if (quantity > 0) {
                        stoneDisplay.push(`${stoneData.icon}${quantity}`);
                        totalStones += quantity;
                    }
                });

                if (stoneDisplay.length > 0) {
                    responseText += stoneDisplay.join(' ') + '\n';
                } else {
                    responseText += 'üö´ Ch∆∞a c√≥ linh th·∫°ch n√†o! ƒê·ªôt ph√° th√†nh c√¥ng ƒë·ªÉ nh·∫≠n linh th·∫°ch.\n';
                }
            }

            // Show shop items if requested (linh ƒëan, linh d∆∞·ª£c, s√°ch)
            if (filterType === 'all' || filterType === 'shop') {
                responseText += `\nüõçÔ∏è **V·∫¨T PH·∫®M SHOP (mua b·∫±ng linh th·∫°ch):**\n`;
                
                const shopDisplay = [];
                
                // Check for shop items
                shopItems.forEach(item => {
                    const shopData = SHOP_ITEMS[item.itemId];
                    if (shopData && shopData.icon && item.quantity > 0) {
                        shopDisplay.push(`${shopData.icon}${item.quantity}`);
                    }
                });

                if (shopDisplay.length > 0) {
                    responseText += shopDisplay.join(' ') + '\n';
                } else {
                    responseText += 'üö´ Ch∆∞a c√≥ v·∫≠t ph·∫©m shop n√†o! D√πng `!shop` ƒë·ªÉ mua linh ƒëan, linh d∆∞·ª£c v√† s√°ch.\n';
                }
            }

            // Add user stats
            responseText += `\nüìä **TH·ªêNG K√ä:**\n`;
            responseText += `‚Ä¢ **Level:** ${cultivationUser.currentLevel}\n`;
            responseText += `‚Ä¢ **EXP:** ${cultivationUser.exp}\n`;

            // Add helpful tips
            if (filterType === 'all') {
                responseText += `\nüí° **G·ª¢I √ù:**\n`;
                responseText += `‚Ä¢ \`!inv materials\` - Ch·ªâ xem nguy√™n li·ªáu & linh th·∫°ch farm\n`;
                responseText += `‚Ä¢ \`!inv medicines\` - Ch·ªâ xem thu·ªëc & ƒëan ph∆∞∆°ng\n`;
                responseText += `‚Ä¢ \`!inv stones\` - Ch·ªâ xem linh th·∫°ch cao c·∫•p\n`;
                responseText += `‚Ä¢ \`!inv shop\` - Ch·ªâ xem v·∫≠t ph·∫©m t·ª´ shop\n`;
                responseText += `‚Ä¢ \`!farm\` - Thu th·∫≠p nguy√™n li·ªáu, ƒëan ph∆∞∆°ng, linh th·∫°ch (10+ t√πy VIP)\n`;
                responseText += `‚Ä¢ \`!shop\` - Mua linh ƒëan, linh d∆∞·ª£c, s√°ch b·∫±ng linh th·∫°ch\n`;
                responseText += `‚Ä¢ \`!craft recipes\` - Xem c√¥ng th·ª©c ch·∫ø t·∫°o\n`;
                responseText += `‚Ä¢ \`!breakthrough\` - ƒê·ªôt ph√° ƒë·ªÉ nh·∫≠n linh th·∫°ch\n`;
                responseText += `‚Ä¢ **1 tin nh·∫Øn** = 1 EXP | **1 ph√∫t voice** = 5 EXP`;
            } else if (filterType === 'materials') {
                responseText += `\nüí° *D√πng \`!farm\` ƒë·ªÉ thu th·∫≠p nguy√™n li·ªáu, ƒëan l√≤, t·ª• linh th·∫°ch. D√πng \`!craft recipes\` ƒë·ªÉ xem c√¥ng th·ª©c.*`;
            } else if (filterType === 'medicines') {
                responseText += `\nüí° *Gi·ªù c√≥ th·ªÉ farm ƒëan ph∆∞∆°ng v√† ƒëan l√≤! D√πng \`!farm\` ƒë·ªÉ thu th·∫≠p.*`;
            } else if (filterType === 'stones') {
                responseText += `\nüí° *D√πng \`!breakthrough\` ƒë·ªÉ ƒë·ªôt ph√° v√† \`!farm\` ƒë·ªÉ thu th·∫≠p t·ª• linh th·∫°ch craft*`;
            } else if (filterType === 'shop') {
                responseText += `\nüí° *D√πng \`!shop\` ƒë·ªÉ mua linh ƒëan, linh d∆∞·ª£c v√† s√°ch. D√πng \`!shop buy <id>\` ƒë·ªÉ mua.*`;
            }

            await message.reply(responseText);

        } catch (error) {
            console.error('Error in inventory command:', error);
            await message.reply(`‚ùå L·ªói inventory: ${error.message}`);
        }
    }
}; 