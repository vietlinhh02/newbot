const { PermissionFlagsBits, ChannelType, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
const { hasFlexiblePermission } = require('../../utils/permissions');
const embedFactory = require('../../utils/embeds');
const logger = require('../../utils/logger');

// Helper function ƒë·ªÉ check ticket staff permissions
async function hasTicketStaffPermission(member, client) {
    // Administrator lu√¥n c√≥ quy·ªÅn
    const isAdmin = await hasFlexiblePermission(member, 'ticket', 'admin', member.guild.id);
    if (isAdmin) {
        return true;
    }
    
    try {
        // L·∫•y ticket staff roles t·ª´ database
        const guildSettings = await client.prisma.guildSettings.findUnique({
            where: { guildId: member.guild.id }
        });
        
        // N·∫øu ch∆∞a setup staff roles, ch·ªâ admin m·ªõi c√≥ quy·ªÅn
        if (!guildSettings || !guildSettings.ticketStaffRoles) {
            return false;
        }
        
        // Check xem member c√≥ m·ªôt trong c√°c staff roles kh√¥ng
        const staffRoleIds = guildSettings.ticketStaffRoles.split(',');
        return member.roles.cache.some(role => staffRoleIds.includes(role.id));
        
    } catch (error) {
        console.error('L·ªói khi check ticket staff permission:', error);
        return false;
    }
}

module.exports = {
    name: 'ticket',
    aliases: ['tickets', 'support'],
    description: 'H·ªá th·ªëng ticket h·ªó tr·ª£ kh√°ch h√†ng',
    usage: '!ticket [create|close|add|remove|setup] [options]',
    examples: [
        '!ticket create Bug trong bot',
        '!ticket close ƒê√£ gi·∫£i quy·∫øt',
        '!ticket add @user',
        '!ticket setup #support-category'
    ],
    permissions: 'member',
    guildOnly: true,
    category: 'tickets',
    
    async execute(message, args, client) {
        const subcommand = args[0]?.toLowerCase();
        
        if (!subcommand) {
            return this.showHelp(message);
        }
        
        // Check if the command is being used in a DM
        if (!message.guild && subcommand !== 'help') {
            return message.reply({ embeds: [embedFactory.error('L·ªói!', 'L·ªánh n√†y ch·ªâ c√≥ th·ªÉ s·ª≠ d·ª•ng trong server!')] });
        }
        
        switch (subcommand) {
            case 'create':
                return this.createTicket(message, args.slice(1), client);
            case 'close':
                return this.closeTicket(message, args.slice(1), client);
            case 'add':
                return this.addUser(message, args.slice(1), client);
            case 'remove':
                return this.removeUser(message, args.slice(1), client);
            case 'setup':
                return this.setupTickets(message, args.slice(1), client);
            case 'setroles':
                return this.setupStaffRoles(message, args.slice(1), client);
            case 'settings':
                return this.showSettings(message, client);
            case 'list':
                return this.listTickets(message, client);
            default:
                return this.showHelp(message);
        }
    },
    
    async showHelp(message) {
        const embed = embedFactory.help({
            title: 'üé´ H·ªá th·ªëng Ticket',
            description: 'H·ªá th·ªëng h·ªó tr·ª£ kh√°ch h√†ng qua ticket',
            categories: [
                {
                    emoji: 'üìù',
                    name: 'L·ªánh c∆° b·∫£n:',
                    value: '`!ticket create [l√Ω do]` - T·∫°o ticket m·ªõi\n' +
                           '`!ticket close [l√Ω do]` - ƒê√≥ng ticket\n' +
                           '`!ticket list` - Xem danh s√°ch ticket'
                },
                {
                    emoji: 'üë•',
                    name: 'Qu·∫£n l√Ω th√†nh vi√™n:',
                    value: '`!ticket add @user` - Th√™m user v√†o ticket\n' +
                           '`!ticket remove @user` - X√≥a user kh·ªèi ticket'
                },
                {
                    emoji: '‚öôÔ∏è',
                    name: 'C·∫•u h√¨nh (Admin):',
                    value: '`!ticket setup #category` - Thi·∫øt l·∫≠p ticket system\n' +
                           '`!ticket setroles @role1 @role2` - Setup staff roles\n' +
                           '`!ticket settings` - Xem c·∫•u h√¨nh hi·ªán t·∫°i'
                }
            ]
        });
        
        await message.reply({ embeds: [embed] });
    },
    
    async createTicket(message, args, client) {
        const reason = args.join(' ') || 'Kh√¥ng c√≥ l√Ω do c·ª• th·ªÉ';
        
        try {
            // Check if user already has an open ticket
            const existingTicket = await client.prisma.ticket.findFirst({
                where: {
                    userId: message.author.id,
                    guildId: message.guild.id,
                    status: 'open'
                }
            });
            
            if (existingTicket) {
                return message.reply({ embeds: [embedFactory.error('B·∫°n ƒë√£ c√≥ ticket m·ªü!', `Vui l√≤ng ƒë√≥ng ticket hi·ªán t·∫°i (<#${existingTicket.channelId}>) tr∆∞·ªõc khi t·∫°o ticket m·ªõi.`)] });
            }
            
            // Get guild settings for ticket configuration
            const guildSettings = await client.prisma.guildSettings.findUnique({
                where: { guildId: message.guild.id }
            });
            
            const ticketCategory = guildSettings?.ticketCategory;
            if (!ticketCategory) {
                return message.reply({ embeds: [embedFactory.error('Ch∆∞a c·∫•u h√¨nh ticket system!', 'Admin vui l√≤ng d√πng `!setup` ƒë·ªÉ thi·∫øt l·∫≠p category cho ticket!')] });
            }
            
            const category = message.guild.channels.cache.get(ticketCategory);
            if (!category || category.type !== ChannelType.GuildCategory) {
                return message.reply({ embeds: [embedFactory.error('Category ticket kh√¥ng t·ªìn t·∫°i!', 'Category ticket ƒë√£ c·∫•u h√¨nh kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ b·ªã x√≥a. Admin vui l√≤ng c·∫•u h√¨nh l·∫°i!')] });
            }
            
            // Generate unique ticket ID
            const ticketId = `ticket-${Date.now()}-${Math.random().toString(36).substr(2, 5)}`;
            
            // Create ticket channel
            const ticketChannel = await message.guild.channels.create({
                name: `üé´-${message.author.username}`,
                type: ChannelType.GuildText,
                parent: category,
                permissionOverwrites: [
                    {
                        id: message.guild.roles.everyone,
                        deny: [PermissionFlagsBits.ViewChannel]
                    },
                    {
                        id: message.author.id,
                        allow: [
                            PermissionFlagsBits.ViewChannel,
                            PermissionFlagsBits.SendMessages,
                            PermissionFlagsBits.ReadMessageHistory
                        ]
                    },
                    {
                        id: message.guild.members.me.id,
                        allow: [
                            PermissionFlagsBits.ViewChannel,
                            PermissionFlagsBits.SendMessages,
                            PermissionFlagsBits.ManageChannels
                        ]
                    }
                ],
                reason: `Ticket created by ${message.author.tag}: ${reason}`
            });
            
            // Add staff permissions 
            // Lu√¥n add quy·ªÅn cho admin roles
            const adminRoles = guildSettings.adminRoles?.split(',') || []; // Use configured admin roles
            for (const roleId of adminRoles) {
                const role = message.guild.roles.cache.get(roleId.trim());
                if (role) {
                    await ticketChannel.permissionOverwrites.create(role, {
                        ViewChannel: true,
                        SendMessages: true,
                        ReadMessageHistory: true
                    });
                }
            }
            
            // Add quy·ªÅn cho support role n·∫øu c√≥
            if (guildSettings.supportRole) {
                const supportRole = message.guild.roles.cache.get(guildSettings.supportRole);
                if (supportRole) {
                    await ticketChannel.permissionOverwrites.create(supportRole, {
                        ViewChannel: true,
                        SendMessages: true,
                        ReadMessageHistory: true
                    });
                }
            }
            
            // Save ticket to database
            await client.prisma.ticket.create({
                data: {
                    ticketId: ticketId,
                    guildId: message.guild.id,
                    channelId: ticketChannel.id,
                    userId: message.author.id,
                    category: 'general',
                    reason: reason,
                    createdBy: message.author.id,
                    status: 'open'
                }
            });
            
            // Create ticket embed
            const ticketEmbed = new EmbedBuilder()
                .setColor(0x00FF00)
                .setTitle('üé´ Ticket ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!')
                .setDescription(`**Ng∆∞·ªùi t·∫°o:** ${message.author}\n**L√Ω do:** ${reason}\n**Ticket ID:** \`${ticketId}\``)
                .addFields([
                    {
                        name: 'üìã H∆∞·ªõng d·∫´n:',
                        value: '‚Ä¢ Staff s·∫Ω s·ªõm h·ªó tr·ª£ b·∫°n\n‚Ä¢ D√πng `!ticket close` ƒë·ªÉ ƒë√≥ng ticket\n‚Ä¢ Gi·ªØ l·ªãch s·ª± v√† m√¥ t·∫£ r√µ v·∫•n ƒë·ªÅ',
                        inline: false
                    }
                ])
                .setTimestamp()
                .setFooter({ text: 'Ticket System', iconURL: client.user.displayAvatarURL() });
            
            // Control buttons
            const row = new ActionRowBuilder()
                .addComponents(
                    new ButtonBuilder()
                        .setCustomId('ticket_close')
                        .setLabel('üîí ƒê√≥ng Ticket')
                        .setStyle(ButtonStyle.Danger),
                    new ButtonBuilder()
                        .setCustomId('ticket_claim')
                        .setLabel('üôã Nh·∫≠n Ticket')
                        .setStyle(ButtonStyle.Primary),
                    new ButtonBuilder()
                        .setCustomId('ticket_transcript')
                        .setLabel('üìÑ Xu·∫•t Log')
                        .setStyle(ButtonStyle.Secondary)
                );
            
            await ticketChannel.send({
                embeds: [ticketEmbed],
                components: [row]
            });
            
            // Confirm to user
            await message.reply({ embeds: [embedFactory.success('ƒê√£ t·∫°o ticket th√†nh c√¥ng!', `Ticket c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c t·∫°o t·∫°i ${ticketChannel}.\n**ID:** \`${ticketId}\`\n**L√Ω do:** ${reason}`)] });
            
            // Ping staff in ticket channel
            let pingMessage = `@here`;
            if (guildSettings.supportRole) {
                pingMessage = `<@&${guildSettings.supportRole}>`;
            }
            await ticketChannel.send(`${pingMessage} **Ticket m·ªõi:** ${reason}`);
            
        } catch (error) {
            logger.error('L·ªói khi t·∫°o ticket:', error);
            await message.reply({ embeds: [embedFactory.error('L·ªói!', 'Kh√¥ng th·ªÉ t·∫°o ticket!')] });
        }
    },
    
    async closeTicket(message, args, client) {
        const reason = args.join(' ') || 'ƒê√£ gi·∫£i quy·∫øt';
        
        try {
            // Check if current channel is a ticket
            const ticket = await client.prisma.ticket.findFirst({
                where: {
                    channelId: message.channel.id,
                    guildId: message.guild.id,
                    status: 'open'
                }
            });
            
            if (!ticket) {
                return message.reply({ embeds: [embedFactory.error('Kh√¥ng t√¨m th·∫•y ticket!', 'ƒê√¢y kh√¥ng ph·∫£i l√† ticket channel ho·∫∑c ticket ƒë√£ ƒë√≥ng!')] });
            }
            
            // Check permissions to close
            const canClose = ticket.userId === message.author.id || 
                           await hasTicketStaffPermission(message.member, client);
            
            if (!canClose) {
                return message.reply({ embeds: [embedFactory.error('Kh√¥ng ƒë·ªß quy·ªÅn!', 'Ch·ªâ ng∆∞·ªùi t·∫°o ticket ho·∫∑c staff m·ªõi c√≥ th·ªÉ ƒë√≥ng!')] });
            }
            
            // Update ticket status
            await client.prisma.ticket.update({
                where: { id: ticket.id },
                data: {
                    status: 'closed',
                    closedBy: message.author.id,
                    closedAt: new Date()
                }
            });
            
            // Close embed
            const closeEmbed = embedFactory.info(
                'üîí Ticket ƒë√£ ƒë√≥ng',
                `**ƒê√≥ng b·ªüi:** ${message.author}\n**L√Ω do:** ${reason}`
            );
            
            await message.channel.send({ embeds: [closeEmbed] });
            
            // Delete channel after 10 seconds
            setTimeout(async () => {
                try {
                    await message.channel.delete(`Ticket closed by ${message.author.tag}: ${reason}`);
                } catch (error) {
                    logger.error('L·ªói khi x√≥a ticket channel:', error);
                }
            }, 10000);
            
        } catch (error) {
            logger.error('L·ªói khi ƒë√≥ng ticket:', error);
            await message.reply({ embeds: [embedFactory.error('L·ªói!', 'Kh√¥ng th·ªÉ ƒë√≥ng ticket!')] });
        }
    },
    
    async addUser(message, args, client) {
        // Check if current channel is a ticket
        const ticket = await client.prisma.ticket.findFirst({
            where: {
                channelId: message.channel.id,
                guildId: message.guild.id,
                status: 'open'
            }
        });
        
        if (!ticket) {
            return message.reply({ embeds: [embedFactory.error('Kh√¥ng t√¨m th·∫•y ticket!', 'ƒê√¢y kh√¥ng ph·∫£i l√† ticket channel!')] });
        }
        
        // Check permissions
        const hasStaffPermission = await hasTicketStaffPermission(message.member, client);
        if (!hasStaffPermission) {
            return message.reply({ embeds: [embedFactory.error('Kh√¥ng ƒë·ªß quy·ªÅn!', 'Ch·ªâ ticket staff m·ªõi c√≥ th·ªÉ th√™m user v√†o ticket!')] });
        }
        
        const targetUser = message.mentions.users.first();
        if (!targetUser) {
            return message.reply({ embeds: [embedFactory.error('Thi·∫øu th√¥ng tin!', 'Vui l√≤ng mention user c·∫ßn th√™m!')] });
        }
        
        try {
            const targetMember = await message.guild.members.fetch(targetUser.id);
            
            await message.channel.permissionOverwrites.create(targetMember, {
                ViewChannel: true,
                SendMessages: true,
                ReadMessageHistory: true
            });
            
            await message.reply({ embeds: [embedFactory.success('ƒê√£ th√™m user!', `ƒê√£ th√™m ${targetUser} v√†o ticket!`)] });
            
        } catch (error) {
            logger.error('L·ªói khi th√™m user:', error);
            await message.reply({ embeds: [embedFactory.error('L·ªói!', 'Kh√¥ng th·ªÉ th√™m user v√†o ticket!')] });
        }
    },
    
    async removeUser(message, args, client) {
        // Similar to addUser but remove permissions
        const ticket = await client.prisma.ticket.findFirst({
            where: {
                channelId: message.channel.id,
                guildId: message.guild.id,
                status: 'open'
            }
        });
        
        if (!ticket) {
            return message.reply({ embeds: [embedFactory.error('Kh√¥ng t√¨m th·∫•y ticket!', 'ƒê√¢y kh√¥ng ph·∫£i l√† ticket channel!')] });
        }
        
        const hasStaffPermission = await hasTicketStaffPermission(message.member, client);
        if (!hasStaffPermission) {
            return message.reply({ embeds: [embedFactory.error('Kh√¥ng ƒë·ªß quy·ªÅn!', 'Ch·ªâ ticket staff m·ªõi c√≥ th·ªÉ x√≥a user kh·ªèi ticket!')] });
        }
        
        const targetUser = message.mentions.users.first();
        if (!targetUser) {
            return message.reply({ embeds: [embedFactory.error('Thi·∫øu th√¥ng tin!', 'Vui l√≤ng mention user c·∫ßn x√≥a!')] });
        }
        
        if (targetUser.id === ticket.userId) {
            return message.reply({ embeds: [embedFactory.error('Kh√¥ng th·ªÉ th·ª±c hi·ªán!', 'Kh√¥ng th·ªÉ x√≥a ng∆∞·ªùi t·∫°o ticket!')] });
        }
        
        try {
            await message.channel.permissionOverwrites.delete(targetUser.id);
            await message.reply({ embeds: [embedFactory.success('ƒê√£ x√≥a user!', `ƒê√£ x√≥a ${targetUser} kh·ªèi ticket!`)] });
            
        } catch (error) {
            logger.error('L·ªói khi x√≥a user:', error);
            await message.reply({ embeds: [embedFactory.error('L·ªói!', 'Kh√¥ng th·ªÉ x√≥a user kh·ªèi ticket!')] });
        }
    },
    
    async setupTickets(message, args, client) {
        // Check permissions
        const isAdmin = await hasFlexiblePermission(message.member, 'ticket', 'admin', message.guild.id);
        if (!isAdmin) {
            return message.reply({ embeds: [embedFactory.error('Kh√¥ng ƒë·ªß quy·ªÅn!', 'B·∫°n c·∫ßn quy·ªÅn **Administrator** ƒë·ªÉ setup ticket system!')] });
        }
        
        if (!args[0]) {
            return message.reply({ embeds: [embedFactory.error('Thi·∫øu th√¥ng tin!', 'Vui l√≤ng cung c·∫•p category cho tickets!\n\n**C√°ch d√πng:** `!ticket setup #category`')] });
        }
        // C√°ch t·ªët h∆°n ƒë·ªÉ parse category mention
        let categoryChannel = message.mentions.channels.first();
        
        // N·∫øu kh√¥ng t√¨m th·∫•y qua mentions, th·ª≠ parse ID t·ª´ string
        if (!categoryChannel) {
            const categoryMatch = args[0].match(/<#(\d+)>/) || args[0].match(/^(\d+)$/);
            if (categoryMatch) {
                const categoryId = categoryMatch[1];
                categoryChannel = message.guild.channels.cache.get(categoryId);
            }
        }
        
        // N·∫øu v·∫´n kh√¥ng t√¨m th·∫•y, th·ª≠ t√¨m theo t√™n
        if (!categoryChannel) {
            const categoryName = args[0].replace('#', '').trim();
            categoryChannel = message.guild.channels.cache.find(ch => 
                ch.type === ChannelType.GuildCategory && 
                ch.name.toLowerCase() === categoryName.toLowerCase()
            );
        }
        
        if (!categoryChannel || categoryChannel.type !== ChannelType.GuildCategory) {
            return message.reply({ embeds: [embedFactory.error('K√™nh kh√¥ng h·ª£p l·ªá!', 'Vui l√≤ng mention m·ªôt category channel h·ª£p l·ªá!\n\n**C√°c c√°ch s·ª≠ d·ª•ng:**\n‚Ä¢ `!ticket setup #category-name`\n‚Ä¢ `!ticket setup category-name`\n‚Ä¢ `!ticket setup 123456789012345678` (ID)')] });
        }
        
        try {
            await client.prisma.guildSettings.upsert({
                where: { guildId: message.guild.id },
                update: { ticketCategory: categoryChannel.id },
                create: {
                    guildId: message.guild.id,
                    ticketCategory: categoryChannel.id
                }
            });
            
            await message.reply({ embeds: [embedFactory.success('ƒê√£ c·∫•u h√¨nh ticket system th√†nh c√¥ng!', `üìÇ **Category:** ${categoryChannel}\nüí° **Tip:** Th√†nh vi√™n c√≥ th·ªÉ d√πng \`!ticket create\` ƒë·ªÉ t·∫°o ticket m·ªõi!`)] });
            
        } catch (error) {
            logger.error('L·ªói khi setup tickets:', error);
            await message.reply({ embeds: [embedFactory.error('L·ªói!', 'Kh√¥ng th·ªÉ c·∫•u h√¨nh ticket system!')] });
        }
    },
    
    async setupStaffRoles(message, args, client) {
        // Check permissions
        const isAdmin = await hasFlexiblePermission(message.member, 'ticket', 'admin', message.guild.id);
        if (!isAdmin) {
            return message.reply({ embeds: [embedFactory.error('Kh√¥ng ƒë·ªß quy·ªÅn!', 'B·∫°n c·∫ßn quy·ªÅn **Administrator** ƒë·ªÉ setup staff roles!')] });
        }
        
        if (args.length === 0) {
            return message.reply({ embeds: [embedFactory.error('Thi·∫øu th√¥ng tin!', 'Vui l√≤ng mention c√°c roles cho ticket staff!\n\n**C√°ch d√πng:** `!ticket setroles @Staff @Moderator @Admin`\n**Ho·∫∑c:** `!ticket setroles clear` ƒë·ªÉ x√≥a t·∫•t c·∫£ roles')] });
        }
        
        if (args[0].toLowerCase() === 'clear') {
            try {
                await client.prisma.guildSettings.upsert({
                    where: { guildId: message.guild.id },
                    update: { ticketStaffRoles: null },
                    create: {
                        guildId: message.guild.id,
                        ticketStaffRoles: null
                    }
                });
                
                return message.reply({ embeds: [embedFactory.success('ƒê√£ x√≥a t·∫•t c·∫£ ticket staff roles!', 'B√¢y gi·ªù ch·ªâ Administrator m·ªõi c√≥ th·ªÉ handle tickets!')] });
            } catch (error) {
                logger.error('L·ªói khi x√≥a ticket staff roles:', error);
                return message.reply({ embeds: [embedFactory.error('L·ªói!', 'Kh√¥ng th·ªÉ x√≥a ticket staff roles!')] });
            }
        }
        
        // Parse roles t·ª´ mentions v√† t√™n
        const mentionedRoles = message.mentions.roles;
        const roleNames = args.filter(arg => !arg.startsWith('<@&')); // L·ªçc ra t√™n roles kh√¥ng ph·∫£i mention
        
        const allRoles = [...mentionedRoles.values()];
        
        // Th√™m roles theo t√™n
        for (const roleName of roleNames) {
            const role = message.guild.roles.cache.find(r => 
                r.name.toLowerCase() === roleName.toLowerCase()
            );
            if (role && !allRoles.includes(role)) {
                allRoles.push(role);
            }
        }
        
        if (allRoles.length === 0) {
            return message.reply({ embeds: [embedFactory.error('Kh√¥ng t√¨m th·∫•y role n√†o!', 'Vui l√≤ng mention c√°c role h·ª£p l·ªá ho·∫∑c cung c·∫•p ID role.\n\n**H∆∞·ªõng d·∫´n:**\n‚Ä¢ `!ticket setroles @Staff @Moderator` - Mention roles\n‚Ä¢ `!ticket setroles Staff Moderator` - Ghi t√™n roles\n‚Ä¢ `!ticket setroles @Staff Moderator Admin` - K·∫øt h·ª£p c·∫£ 2')] });
        }
        
        try {
            // L∆∞u role IDs v√†o database
            const roleIds = allRoles.map(role => role.id).join(',');
            
            await client.prisma.guildSettings.upsert({
                where: { guildId: message.guild.id },
                update: { ticketStaffRoles: roleIds },
                create: {
                    guildId: message.guild.id,
                    ticketStaffRoles: roleIds
                }
            });
            
            // Gi·ªõi h·∫°n hi·ªÉn th·ªã t·ªëi ƒëa 10 role ƒë·ªÉ tr√°nh embed qu√° l·ªõn
            const roleList = allRoles.slice(0, 10).map(role => `‚Ä¢ ${role}`).join('\n');
            const moreRoles = allRoles.length > 10 ? `\n\n*...v√† ${allRoles.length - 10} role kh√°c*` : '';
            
            await message.reply({ embeds: [embedFactory.success('ƒê√£ c·∫•u h√¨nh ticket staff roles th√†nh c√¥ng!', `**Roles ƒë∆∞·ª£c ph√©p handle tickets:**\n${roleList}${moreRoles}\n\nüí° **L∆∞u √Ω:** Ch·ªâ nh·ªØng ng∆∞·ªùi c√≥ m·ªôt trong c√°c roles n√†y ho·∫∑c Administrator m·ªõi c√≥ th·ªÉ:\n‚Ä¢ Claim tickets (üôã Nh·∫≠n Ticket)\n‚Ä¢ ƒê√≥ng tickets (üîí ƒê√≥ng Ticket)\n‚Ä¢ Xu·∫•t transcript (üìÑ Xu·∫•t Log)\n‚Ä¢ Th√™m/x√≥a user kh·ªèi tickets`)] });                    } catch (error) {            logger.error('L·ªói khi setup ticket staff roles:', error);            await message.reply({ embeds: [embedFactory.error('L·ªói!', 'Kh√¥ng th·ªÉ c·∫•u h√¨nh ticket staff roles!')] });        }
    },
    
    async showSettings(message, client) {
        try {
            const guildSettings = await client.prisma.guildSettings.findUnique({
                where: { guildId: message.guild.id }
            });
            
            const embed = embedFactory.info(
                '‚öôÔ∏è C·∫•u h√¨nh Ticket System',
                ''
            );
            
            if (!guildSettings || (!guildSettings.ticketCategory && !guildSettings.ticketStaffRoles && !guildSettings.supportRole)) {
                embed.setDescription('‚ùå **Ch∆∞a c√≥ c·∫•u h√¨nh n√†o!**\n' +
                    'D√πng `!setup` ƒë·ªÉ b·∫Øt ƒë·∫ßu c·∫•u h√¨nh ticket system!');
                return message.reply({ embeds: [embed] });
            }
            
            // Category info
            let categoryInfo = '‚ùå Ch∆∞a setup';
            if (guildSettings.ticketCategory) {
                const category = message.guild.channels.cache.get(guildSettings.ticketCategory);
                categoryInfo = category ? `‚úÖ ${category}` : '‚ùå Category kh√¥ng t·ªìn t·∫°i';
            }

            // Support Role info
            let supportRoleInfo = '‚ùå Ch∆∞a setup';
            if (guildSettings.supportRole) {
                const supportRole = message.guild.roles.cache.get(guildSettings.supportRole);
                supportRoleInfo = supportRole ? `‚úÖ ${supportRole}` : '‚ùå Role h·ªó tr·ª£ kh√¥ng t·ªìn t·∫°i';
            }
            
            // Staff roles info
            let staffRolesInfo = '‚ùå Ch∆∞a setup (ch·ªâ Administrator)';
            if (guildSettings.ticketStaffRoles) {
                const roleIds = guildSettings.ticketStaffRoles.split(',');
                const roles = roleIds.map(id => message.guild.roles.cache.get(id)).filter(Boolean);
                
                if (roles.length > 0) {
                    // Gi·ªõi h·∫°n hi·ªÉn th·ªã t·ªëi ƒëa 5 role ƒë·ªÉ tr√°nh embed qu√° l·ªõn
                    const displayRoles = roles.slice(0, 5);
                    const moreText = roles.length > 5 ? ` *+${roles.length - 5} kh√°c*` : '';
                    
                    staffRolesInfo = `‚úÖ ${displayRoles.join(' ')}${moreText}\n` +
                        `üìä **T·ªïng:** ${roles.length} roles`;
                } else {
                    staffRolesInfo = '‚ùå Roles kh√¥ng t·ªìn t·∫°i';
                }
            }
            
            embed.addFields([
                {
                    name: 'üìÇ Category Ticket',
                    value: categoryInfo,
                    inline: false
                },
                {
                    name: 'üë• Role H·ªó tr·ª£ (Ping)',
                    value: supportRoleInfo,
                    inline: false
                },
                {
                    name: 'üõ†Ô∏è Role Staff Ticket',
                    value: staffRolesInfo,
                    inline: false
                },
                {
                    name: 'üìã H∆∞·ªõng d·∫´n',
                    value: '‚Ä¢ D√πng `!setup` ƒë·ªÉ c·∫•u h√¨nh ticket system\n' +
                           '‚Ä¢ `!ticket setroles @role1 @role2` - Setup staff roles\n' +
                           '‚Ä¢ `!ticket setroles clear` - X√≥a t·∫•t c·∫£ staff roles',
                    inline: false
                }
            ]);
            
            await message.reply({ embeds: [embed] });
            
        } catch (error) {
            logger.error('L·ªói khi l·∫•y ticket settings:', error);
            await message.reply({ embeds: [embedFactory.error('L·ªói!', 'Kh√¥ng th·ªÉ l·∫•y c·∫•u h√¨nh ticket!')] });
        }
    },
    
    async listTickets(message, client) {
        try {
            const tickets = await client.prisma.ticket.findMany({
                where: {
                    guildId: message.guild.id,
                    status: 'open'
                },
                orderBy: { createdAt: 'desc' },
                take: 10
            });
            
            if (tickets.length === 0) {
                return message.reply({ embeds: [embedFactory.info('Kh√¥ng c√≥ ticket n√†o!', 'üìù **Kh√¥ng c√≥ ticket n√†o ƒëang m·ªü!**')] });
            }
            
            const embed = embedFactory.info(
                `üé´ Danh s√°ch Ticket (${tickets.length})`,
                tickets.map(ticket => {
                    const user = message.guild.members.cache.get(ticket.userId);
                    return `üé´ <#${ticket.channelId}> - ${user ? user.user.tag : 'Unknown'} (<t:${Math.floor(ticket.createdAt.getTime() / 1000)}:R>)`;
                }).join('\n')
            );
            
            await message.reply({ embeds: [embed] });
            
        } catch (error) {
            logger.error('L·ªói khi l·∫•y danh s√°ch tickets:', error);
            await message.reply({ embeds: [embedFactory.error('L·ªói!', 'Kh√¥ng th·ªÉ l·∫•y danh s√°ch tickets!')] });
        }
    }
}; 